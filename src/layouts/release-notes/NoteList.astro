---
import { match, P } from "ts-pattern";

import type { ReleaseNote } from "~/misc/releaseNote";

import NoteListItem from "./NoteListItem.astro";

interface Props {
  title: string;
  notes: ReleaseNote[];
  activeSlug?: string | undefined;
}

const { title, notes: _notes, activeSlug } = Astro.props;
const [notes, noteMap] = _notes.reduce(
  (acc, note) => {
    const [notes, noteMap] = acc;
    match(note.slug.split("/").slice(1))
      .with([P.select(P.string), P.string], (directory) => {
        if (!noteMap.has(directory)) {
          noteMap.set(directory, [note]);
        } else {
          noteMap.get(directory)!.push(note);
        }
      })
      .with([P.string], () => {
        notes.push(note);
      })
      .otherwise(() => {
        console.error(`Invalid slug: ${note.slug}`);
      });
    return acc;
  },
  [[] as ReleaseNote[], new Map<string, ReleaseNote[]>()],
);
---

<li>
  <h4 class="p-2 text-lg font-bold first:mt-0">{title}</h4>
  <ul class="flex flex-col gap-1">
    {notes.map((note) => <NoteListItem note={note} activeSlug={activeSlug} />)}
    {
      Array.from(noteMap.entries()).map(([title, notes]) => {
        return (
          <li>
            <h5 class="p-2 text-lg font-bold">{title}</h5>
            <ul class="flex flex-col gap-1">
              {notes.map((note) => (
                <NoteListItem note={note} activeSlug={activeSlug} />
              ))}
            </ul>
          </li>
        );
      })
    }
  </ul>
</li>
