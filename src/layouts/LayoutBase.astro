---
import type { Lang } from "~/type";
import Gnb from "./gnb/Gnb.astro";
import Trackers from "./Trackers.astro";
import ArticleStyle from "./ArticleStyle.astro";

interface Props {
  lang: Lang;
  title: string;
}
const { lang, title } = Astro.props;
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <title>{title}</title>
    <Trackers />
  </head>
  <body>
    <script type="text/javascript">
      trackEvent("Developers_Page_View", {
        title: document.title,
        pathname: location.pathname,
      });
      [
        { ms: 1000, time: "1s" },
        { ms: 10000, time: "10s" },
        { ms: 30000, time: "30s" },
        { ms: 60000, time: "1m" },
        { ms: 600000, time: "10m" },
        { ms: 1800000, time: "30m" },
      ].map(({ ms, time }) => {
        setTimeout(() => {
          trackEvent("Developers_Page_Stay", {
            title: document.title,
            pathname: location.pathname,
            time,
          });
        }, ms);
      });
      // https://mixpanel.com/blog/link-tracking-in-mixpanel/
      window.addEventListener("click", (e) => {
        const a = e.target.closest("a");
        if (!a) return;
        const targetIsSelf = !a.target || a.target === "_self";
        if (targetIsSelf) e.preventDefault();
        trackEvent(
          "Developers_Link_Click",
          {
            label: a.textContent.trim(),
            from: location.pathname,
            to: a.href,
          },
          () => {
            if (!targetIsSelf) return;
            if ("norefresh" in a.dataset) return;
            location.href = a.href;
          }
        );
      });
    </script>
    <style is:global>
      :root {
        word-break: break-all;
        overflow-wrap: break-word;
        scroll-behavior: smooth;
      }

      html,
      body {
        height: 100%;
      }

      .waiting {
        transform-origin: center;
        animation-name: waiting-outer;
        animation-duration: 7s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
      }
      .waiting circle {
        transform-origin: center;
        animation-name: waiting-inner;
        animation-duration: 5s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
      }
      @keyframes waiting-outer {
        from {
          transform: rotate(0);
        }
        to {
          transform: rotate(1turn);
        }
      }
      /* 12 * 2pi = 75.3982... */
      @keyframes waiting-inner {
        0% {
          transform: rotate(0);
          stroke-dasharray: 0 0 0 0 999;
        }
        25% {
          transform: rotate(0.5turn);
          stroke-dasharray: 0 0 0 75.4 999;
        }
        50% {
          transform: rotate(1turn);
          stroke-dasharray: 0 0 75.4 75.4 999;
        }
        75% {
          transform: rotate(1.5turn);
          stroke-dasharray: 0 75.4 75.4 75.4 999;
        }
        100% {
          transform: rotate(2turn);
          stroke-dasharray: 75.4 75.4 75.4 75.4 999;
        }
      }
    </style>
    <ArticleStyle />
    <div class="flex h-full flex-col">
      <Gnb lang={lang} />
      <main class="min-h-0 flex-1">
        <slot />
      </main>
    </div>
  </body>
</html>
