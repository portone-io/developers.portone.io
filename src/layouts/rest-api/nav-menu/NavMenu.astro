---
import LeftSidebar from "~/layouts/sidebar/LeftSidebar.astro";

import NavMenuLink from "./NavMenuLink.astro";

export interface NavMenuItem {
  title: string;
  id: string;
  children?: NavMenuItem[];
}

interface Props {
  title: string;
  items: NavMenuItem[];
  basepath: string;
}
const { title, items, basepath } = Astro.props;
const _items = [
  // Any Hangul character included breaks the Astro Language Server
  { title: "\uac1c\uc694", id: "overview" },
  ...items,
  { title: "\ud0c0\uc785\u0020\uc815\uc758", id: "type-def" },
];
---

<script>
  import { effect, signal } from "@preact/signals";

  import {
    closeNav,
    currentSectionSignal,
    navOpenStatesSignal,
    openNav,
    toggleNav,
  } from "~/state/rest-api/nav";
  import { sidebarOpenSignal } from "~/state/sidebar";

  const navMenu = document.getElementById("nav-menu");
  const navMenuItems = Array.from(
    navMenu?.querySelectorAll("[data-navitem]") || [],
  ) as HTMLDivElement[];
  for (const item of navMenuItems) {
    const id = item.dataset.navitem || "";
    const button = item.querySelector("button") as HTMLButtonElement;
    if (!button) continue;
    button.addEventListener("click", () => toggleNav(id));
  }
  const navMenuAnchors = Array.from(
    navMenu?.querySelectorAll("a") || [],
  ) as HTMLAnchorElement[];
  for (const anchor of navMenuAnchors) {
    anchor.addEventListener("click", (e) => {
      e.preventDefault();
      sidebarOpenSignal.value = false;
      document
        .getElementById(anchor.dataset.target || "")
        ?.scrollIntoView({ behavior: "smooth" });
      history.pushState({}, "", anchor.href);
    });
  }
  function getParentCategoryId(id: string): string {
    return (
      (
        navMenu
          ?.querySelector(`[data-navitem="${id}"]`)
          ?.parentElement?.closest("[data-navitem]") as HTMLElement | undefined
      )?.dataset.navitem || id
    );
  }
  const previousSectionSignal = signal<string>("");
  effect(() => {
    const currentSectionId = currentSectionSignal.value;
    const currentSection = getParentCategoryId(currentSectionId);
    const previousSection = previousSectionSignal.peek();
    if (currentSection === previousSection) return;
    previousSectionSignal.value = currentSection;
    openNav(currentSection);
    closeNav(previousSection);
  });
  effect(() => {
    const currentSection = currentSectionSignal.value;
    const navOpenStates = navOpenStatesSignal.value;
    for (const item of navMenuItems) {
      const id = item.dataset.navitem || "";
      item.dataset.active = String(currentSection === id);
      item.dataset.open = String(Boolean(navOpenStates[id]));
    }
  });
  const article = document.getElementById("overview")!.closest("article")!;
  const sections = Array.from(article.children).filter(
    (child) => child.tagName === "SECTION",
  );
  function observe() {
    interface Item {
      isIntersecting: boolean;
      intersectionRatio: number;
      offsetTop: number;
    }
    const items: Record<string, Item> = {};
    for (const section of sections) {
      const { offsetTop } = section as HTMLElement;
      items[section.id] = {
        isIntersecting: false,
        intersectionRatio: 0,
        offsetTop,
      };
    }
    const observer = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          const item = items[entry.target.id]!;
          const { isIntersecting, intersectionRatio } = entry;
          Object.assign(item, { isIntersecting, intersectionRatio });
        }
        // 지금 화면에 보이고있는 section들
        const intersectingIds = Object.keys(items).filter((id) =>
          Boolean(items[id]?.isIntersecting),
        );
        // 화면에 보이는 section 중에서 사용자가 지금 관심있어할법한 section 순으로 정렬함.
        // 우선 intersectionRatio가 큰 걸 찾는다.
        // intersectionRatio가 0.5면 화면에 반쯤 보이고 있다는 뜻이고, 1이면 화면 안에 전부 들어와있다는 뜻이다.
        // intersectionRatio가 둘 다 1이면 (두 section의 모든 내용이 전부 화면에 보이고 있다면) offsetTop이 작은 걸 찾는다.
        // offsetTop이 작다는 것은 화면에서 위쪽에 보인다는 뜻이다.
        intersectingIds.sort((aId, bId) => {
          const a = items[aId]!;
          const b = items[bId]!;
          const aRatio = a.intersectionRatio;
          const bRatio = b.intersectionRatio;
          if (aRatio !== bRatio) return bRatio - aRatio; // descending
          const aTop = a.offsetTop;
          const bTop = b.offsetTop;
          return aTop - bTop; // ascending
        });
        currentSectionSignal.value = intersectingIds[0]!;
      },
      {
        rootMargin: "-56px 0px 0px 0px", // gnb height
        threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],
      },
    );
    sections.forEach((section) => observer.observe(section));
    function resizeHandler() {
      for (const section of sections) {
        const { id, offsetTop } = section as HTMLElement;
        items[id]!.offsetTop = offsetTop;
      }
    }
    addEventListener("resize", resizeHandler);
    return function unobserve() {
      removeEventListener("resize", resizeHandler);
      observer.disconnect();
    };
  }
  observe(); // never unobserve
</script>
<LeftSidebar>
  <div class="px-4 pb-2 pt-[28px] text-lg font-bold">{title}</div>
  <hr class="mx-4" />
  <nav
    id="nav-menu"
    class="flex flex-1 flex-col gap-2 overflow-y-scroll p-4 text-sm text-slate-6"
  >
    {
      _items.map(({ id, title, children }) => (
        <div data-navitem={id} class="group">
          <div class="flex rounded-1.5 tracking-tight hover-bg-slate-1 group-data-[active=true]:bg-slate-1 group-data-[active=true]:text-orange-5 group-data-[active=true]:font-bold">
            <NavMenuLink id={id} title={title} basepath={basepath} />
            {children && children.length && (
              <button class="h-full flex items-center p-2">
                <i class="i-ic-baseline-keyboard-arrow-right group-data-[open=true]:i-ic-baseline-keyboard-arrow-down inline-block" />
              </button>
            )}
          </div>
          {children && children.length && (
            <div class="mt-2 hidden flex-col gap-2 border-l pl-2.5 group-data-[open=true]:flex">
              {children.map(({ id, title }) => (
                <div
                  data-navitem={id}
                  class="rounded-1.5 tracking-tight data-[active=true]:bg-slate-1 hover-bg-slate-1 data-[active=true]:text-orange-5 data-[active=true]:font-bold"
                >
                  <NavMenuLink id={id} title={title} basepath={basepath} />
                </div>
              ))}
            </div>
          )}
        </div>
      ))
    }
    <slot />
  </nav>
</LeftSidebar>
