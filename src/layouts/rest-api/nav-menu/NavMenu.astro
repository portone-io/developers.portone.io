---
import LeftSidebar from "~/layouts/sidebar/LeftSidebar.astro";
import NavMenuLink from "./NavMenuLink.astro";

export interface NavMenuItem {
  title: string;
  id: string;
  children?: NavMenuItem[];
}

interface Props {
  items: NavMenuItem[];
}
const { items } = Astro.props;
const _items = [
  // Any Hangul character included breaks the Astro Language Server
  { title: "\uac1c\uc694", id: "overview" },
  ...items,
  { title: "\ud0c0\uc785\u0020\uc815\uc758", id: "type-def" },
];
---

<script>
  import { effect, signal } from "@preact/signals";
  import {
    currentSectionSignal,
    navOpenStatesSignal,
    toggleNav,
    openNav,
    closeNav,
  } from "~/state/rest-api/nav";
  import { sidebarOpenSignal } from "~/state/sidebar";
  const navMenu = document.getElementById("nav-menu");
  const navMenuItems = Array.from(
    navMenu?.querySelectorAll("[data-navitem]") || []
  ) as HTMLDivElement[];
  for (const item of navMenuItems) {
    const id = item.dataset.navitem || "";
    const button = item.querySelector("button") as HTMLButtonElement;
    if (!button) continue;
    button.addEventListener("click", () => toggleNav(id));
  }
  const navMenuAnchors = Array.from(
    navMenu?.querySelectorAll("a") || []
  ) as HTMLAnchorElement[];
  for (const anchor of navMenuAnchors) {
    anchor.addEventListener("click", (e) => {
      e.preventDefault();
      sidebarOpenSignal.value = false;
      document
        .getElementById(anchor.dataset.target || "")
        ?.scrollIntoView({ behavior: "smooth" });
      history.pushState({}, "", anchor.href);
    });
  }
  function getParentCategoryId(id: string): string {
    return (
      (
        navMenu
          ?.querySelector(`[data-navitem="${id}"]`)
          ?.parentElement?.closest("[data-navitem]") as HTMLElement | undefined
      )?.dataset.navitem || id
    );
  }
  const previousSectionSignal = signal<string>("");
  effect(() => {
    const currentSection = getParentCategoryId(currentSectionSignal.value);
    const previousSection = previousSectionSignal.peek();
    if (currentSection === previousSection) return;
    previousSectionSignal.value = currentSectionSignal.value;
    openNav(currentSection);
    closeNav(previousSection);
  });
  effect(() => {
    const currentSection = currentSectionSignal.value;
    const navOpenStates = navOpenStatesSignal.value;
    for (const item of navMenuItems) {
      const id = item.dataset.navitem || "";
      item.dataset.active = String(currentSection === id);
      item.dataset.open = String(Boolean(navOpenStates[id]));
    }
  });
  const article = document.getElementById("overview")!.closest("article")!;
  const sections = Array.from(article.children).filter(
    (child) => child.tagName === "SECTION"
  );
  function observe() {
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries.filter(({ isIntersecting }) => isIntersecting)[0];
        if (!entry) return;
        currentSectionSignal.value = entry.target.id;
      },
      { rootMargin: `0px 0px -${window.innerHeight - 100}px` }
    );
    sections.forEach((section) => observer.observe(section));
    return () => observer.disconnect();
  }
  let unobserve = observe();
  addEventListener("resize", () => {
    unobserve();
    unobserve = observe();
  });
</script>
<LeftSidebar>
  <nav
    id="nav-menu"
    class="text-slate-6 gap-12px flex h-full flex-col overflow-y-scroll p-2 pt-8 text-lg"
  >
    {
      _items.map(({ id, title, children }) => (
        <div data-navitem={id} class="group">
          <div class="group-data-[active=true]:text-orange-5 hover:bg-slate-1 flex transition-colors">
            <NavMenuLink id={id} title={title} />
            {children && children.length && (
              <button class="flex h-full items-center p-2">
                <i class="i-ic-baseline-keyboard-arrow-right group-data-[open=true]:i-ic-baseline-keyboard-arrow-down inline-block" />
              </button>
            )}
          </div>
          {children && children.length && (
            <div class="hidden flex-col pl-2 text-base group-data-[open=true]:flex">
              {children.map(({ id, title }) => (
                <div
                  data-navitem={id}
                  class="data-[active=true]:text-orange-5 hover:bg-slate-1 transition-colors"
                >
                  <NavMenuLink id={id} title={title} />
                </div>
              ))}
            </div>
          )}
        </div>
      ))
    }
  </nav>
</LeftSidebar>
