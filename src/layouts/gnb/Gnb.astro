---
import { clsx } from "clsx";

import type { Lang } from "~/type";

import Dropdown from "./Dropdown";
import Logo from "./Logo.astro";
import MobileMenuButton from "./MobileMenuButton";
import VersionSwitch from "./VersionSwitch";

interface Props {
  lang: Lang;
  navAsMenu: boolean;
}
const { lang, navAsMenu } = Astro.props;
const url = Astro.url;

// To bypass the astro bug, all Korean characters were escaped.
const ko = {
  developers: "\uac1c\ubc1c\uc790\uc13c\ud130",
  "sdk-playground": "SDK \ub180\uc774\ud130",
  console: "\uad00\ub9ac\uc790 \ucf58\uc194",
  language: "\uc5b8\uc5b4",
};
const en: typeof ko = {
  developers: "Developers",
  "sdk-playground": "SDK Playground",
  console: "Admin Console",
  language: "Language",
};
const t = lang === "ko" ? ko : en;
---

<script>
  import { effect } from "@preact/signals";

  import { systemVersionSignal } from "~/state/nav";

  const navMenu = document.getElementById("gnb")!;
  effect(() => {
    const systemVersion = systemVersionSignal.value;
    navMenu.dataset.selectedSystemVersion = systemVersion;
  });
</script>
<style is:global>
  [data-selected-system-version="v1"] [data-system-version="v2"],
  [data-selected-system-version="v2"] [data-system-version="v1"] {
    display: none;
  }
</style>
<div class="z-50 h-14">
  <header
    id="gnb"
    class="fixed z-10 h-inherit w-full flex items-center justify-between border-b bg-white"
  >
    <div class="h-full flex flex-grow items-center pl-4 md:pl-6">
      <div
        class="z-10 h-full flex flex-grow items-center bg-white md:flex-grow-0"
      >
        <a class="h-full inline-flex items-center" href={`/docs/${lang}`}>
          <div class="flex items-center gap-2">
            <Logo class="w-22" />
            <span class="break-keep">{t["developers"]}</span>
          </div>
        </a>
        <div class="mx-6 md:ml-[70px]">
          <VersionSwitch url={url.toString()} client:load />
        </div>
      </div>
      <div
        class={clsx(
          "flex gap-6 md:h-full items-center",
          navAsMenu
            ? // prettier-ignore
              "nav-as-menu <md:(absolute inset-x-0 bottom-0 py-4 transition-transform transform duration-300 flex-col bg-white data-[open]:(translate-y-full shadow-lg))>"
            : "<md:hidden",
        )}
      >
        <Dropdown
          client:visible
          link={{ all: "/api", v1: "/api/rest-v1", v2: "/api/rest-v2" }}
          items={[
            { label: "REST API V1", link: "/api/rest-v1", systemVersion: "v1" },
            { label: "REST API V2", link: "/api/rest-v2", systemVersion: "v2" },
            // { label: "GraphQL API", link: "/api/graphql" },
            {
              label: t["sdk-playground"],
              link: "https://sdk-playground.portone.io/",
            },
          ]}
        >
          API & SDK
        </Dropdown>
        {
          lang === "ko" && [
            <a class="h-full inline-flex items-center" href="/release-notes">
              ë¦´ë¦¬ì¦ˆ ë…¸íŠ¸
            </a>,
            <a class="h-full inline-flex items-center" href="/blog">
              ê¸°ìˆ  ë¸”ë¡œê·¸
            </a>,
          ]
        }
      </div>
    </div>
    <div class="hidden h-full items-center gap-4 pr-6 md:flex">
      <a
        class="inline-flex items-center gap-1"
        href="https://admin.portone.io/"
      >
        <span>{t["console"]}</span>
        <i class="i-ic-baseline-launch"></i>
      </a>
      <!-- <a href={`/docs/${lang === "ko" ? "en" : "ko"}`}>
        {lang === "ko" ? "ðŸ‡ºðŸ‡¸ English" : "ðŸ‡°ðŸ‡· í•œêµ­ì–´"}
      </a> -->
    </div>
    <MobileMenuButton client:visible />
  </header>
</div>
<script>
  import { effect } from "@preact/signals";

  import { sidebarOpenSignal } from "~/state/sidebar";

  const nav = document.querySelector(".nav-as-menu") as HTMLElement | null;
  if (nav) {
    effect(() => {
      const sidebarOpen = sidebarOpenSignal.value;
      if (sidebarOpen) nav.setAttribute("data-open", "true");
      else nav.removeAttribute("data-open");
    });
  }
</script>
