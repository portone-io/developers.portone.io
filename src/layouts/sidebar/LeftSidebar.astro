---
import type { Lang } from "~/type";
import { calcNavMenuAncestors, navMenuSignal } from "~/state/server-only/nav";
import { navOpenStatesSignal, slugSignal } from "~/state/nav";

import LeftSidebarItem from "./LeftSidebarItem";
import { SearchButton } from "./search";
import SidebarBackground from "./SidebarBackground";
import VersionSwitch from "./VersionSwitch";
import GroupSideLink from "./GroupSideLink";

interface Props {
  lang: Lang;
  slug: string;
}
const { lang, slug } = Astro.props;

const navMenu = navMenuSignal.value;
const navMenuItems = navMenu[lang] || [];
const navMenuAncestors = calcNavMenuAncestors(navMenuItems);
const navOpenStates = (navOpenStatesSignal.value = Object.fromEntries([
  ...(navMenuAncestors[slug]?.map((ancestor) => [ancestor, true]) || []),
  [slug, true],
]));
slugSignal.value = slug;
---

<script>
  import { effect } from "@preact/signals";
  import { navOpenStatesSignal, slugSignal } from "~/state/nav";
  import { sidebarOpenSignal, systemVersionSignal } from "~/state/sidebar";
  const leftSidebar = document.getElementById("left-sidebar")!;
  navOpenStatesSignal.value = {
    ...navOpenStatesSignal.value,
    ...JSON.parse(leftSidebar.dataset.navopenstates!),
  };
  slugSignal.value = leftSidebar.dataset.slug!;
  const scrollArea: HTMLElement =
    leftSidebar.querySelector(".overflow-y-scroll")!;
  const activeElement = scrollArea.querySelector("[data-active=active]");
  if (activeElement) {
    scrollArea.scrollTop =
      activeElement.getBoundingClientRect().top -
      scrollArea.getBoundingClientRect().top -
      50;
  }
  effect(() => {
    const sidebarOpen = sidebarOpenSignal.value;
    const div = leftSidebar.children[0] as HTMLDivElement;
    div.style.transform = sidebarOpen ? "none" : "translateX(-100%)";
  });
  effect(() => {
    const systemVersion = systemVersionSignal.value;
    leftSidebar.dataset.selectedSystemVersion = systemVersion;
  });
</script>
<SidebarBackground client:visible />
<style>
  [data-selected-system-version="v1"] [data-system-version="v2"],
  [data-selected-system-version="v2"] [data-system-version="v1"] {
    display: none;
  }
</style>
<aside
  id="left-sidebar"
  class="w-65 absolute z-10 shrink-0 text-slate-700 md:relative md:block"
  data-slug={slug}
  data-selected-system-version="v1"
  data-navopenstates={JSON.stringify(navOpenStates)}
>
  <div
    style="transform:translateX(-100%)"
    class="w-inherit fixed flex h-[calc(100vh-3.5rem)] flex-col border-r bg-white transition-transform md:!transform-none"
  >
    <div class="relative flex flex-col gap-2 px-2 py-4">
      <VersionSwitch client:visible />
      <SearchButton lang={lang} client:visible />
    </div>
    <nav class="relative flex-1 overflow-y-scroll">
      <ul class="flex flex-col gap-1 px-2 pb-4">
        {
          navMenuItems.map((item) => {
            if (item.type === "group") {
              return (
                <li
                  class="[&:not(:last-child)]:mb-4"
                  data-system-version={item.systemVersion}
                >
                  <h4 class="p-2 text-lg font-bold first:mt-0">
                    <span>{item.label}</span>
                    {item.side && (
                      <GroupSideLink client:visible {...item.side} />
                    )}
                  </h4>
                  <ul class="flex flex-col gap-1">
                    {item.items.map((item) => (
                      <li>
                        <LeftSidebarItem client:visible {...item} />
                      </li>
                    ))}
                  </ul>
                </li>
              );
            }
            if (item.slug === "===") {
              return (
                <li>
                  <hr class="mx-2 my-4" />
                </li>
              );
            }
            return (
              <li data-system-version={item.systemVersion}>
                <LeftSidebarItem client:visible {...item} />
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>
</aside>
