"""
대상의 하위호환성이 보장되지 않음을 명시합니다.
Represents that the target definition does not guarentee backward compatibility.
"""
directive @unstable on ENUM | ARGUMENT_DEFINITION | INPUT_OBJECT | FIELD_DEFINITION | INTERFACE | OBJECT | UNION | INPUT_FIELD_DEFINITION | ENUM_VALUE
"""
대상이 PortOne Public API 지원 대상에 공식적으로 포함되지 않음을 명시합니다.
Represents that the target definition is excluded from PortOne Public API specification.
"""
directive @hidden on ENUM | ARGUMENT_DEFINITION | INPUT_OBJECT | FIELD_DEFINITION | INTERFACE | OBJECT | UNION | INPUT_FIELD_DEFINITION | ENUM_VALUE

schema {
  query: Query
  mutation: Mutation
}

"날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다."
scalar Date

"날짜와 시간을 포함한 특정 시점을 나타냅니다. ISO 8601 date-time 문자열 형식을 따릅니다."
scalar DateTime

scalar Long

"평균 거래액 현황 조회 결과"
union AnalyticsAverageAmountChartOutput = AnalyticsAverageAmountChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"환불율 조회 결과"
union AnalyticsCancellationRateOutput = AnalyticsCancellationRate | InvalidRequestError | UnauthorizedError | ForbiddenError

"카드결제 현황 조회 결과"
union AnalyticsCardChartOutput = AnalyticsCardChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"카드사별 결제 현황 조회 결과"
union AnalyticsCardCompanyChartOutput = AnalyticsCardCompanyChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"간편결제 현황 조회 결과"
union AnalyticsEasyPayChartOutput = AnalyticsEasyPayChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"간편결제사별 결제 현황 조회 결과"
union AnalyticsEasyPayProviderChartOutput = AnalyticsEasyPayProviderChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"해외 결제 사용 여부 조회 결과"
union AnalyticsOverseasPaymentUsageOutput = AnalyticsOverseasPaymentUsage | UnauthorizedError | ForbiddenError

"결제현황 조회 결과"
union AnalyticsPaymentChartOutput = AnalyticsPaymentChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"결제현황 조회 결과"
union AnalyticsPaymentMethodChartOutput = AnalyticsPaymentMethodChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"결제수단 트렌드 조회 결과"
union AnalyticsPaymentMethodTrendChartOutput = AnalyticsPaymentMethodTrendChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"결제현황 조회 결과"
union AnalyticsPgCompanyChartOutput = AnalyticsPgCompanyChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"결제대행사별 거래 추이 조회 결과"
union AnalyticsPgCompanyTrendChartOutput = AnalyticsPgCompanyTrendChart | InvalidRequestError | UnauthorizedError | ForbiddenError

"파트너 상태 승인 완료 변경 결과"
union ApprovePlatformPartnerOutput = ApprovePlatformPartnerPayload | PlatformNotEnabledError | InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError

"추가 수수료 정책 예약 업데이트 취소 결과"
union CancelPlatformAdditionalFeePolicyScheduleOutput = CancelPlatformAdditionalFeePolicySchedulePayload | PlatformNotEnabledError | InvalidRequestError | PlatformAdditionalFeePolicyNotFoundError | UnauthorizedError

"계약 예약 업데이트 취소 결과"
union CancelPlatformContractScheduleOutput = CancelPlatformContractSchedulePayload | PlatformNotEnabledError | InvalidRequestError | PlatformContractNotFoundError | UnauthorizedError

"할인 분담 정책 예약 업데이트 취소 결과"
union CancelPlatformDiscountSharePolicyScheduleOutput = CancelPlatformDiscountSharePolicySchedulePayload | PlatformNotEnabledError | InvalidRequestError | PlatformDiscountSharePolicyNotFoundError | UnauthorizedError

"파트너 예약 업데이트 취소 결과"
union CancelPlatformPartnerScheduleOutput = CancelPlatformPartnerSchedulePayload | PlatformNotEnabledError | InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError

"대량이체 완료 결과"
union CompletePlatformPayoutOutput = CompletePlatformPayoutPayload | UnauthorizedError | PlatformPayoutNotFoundError | PlatformPayoutAlreadyCompletedError | InvalidRequestError | ForbiddenError | PlatformNotEnabledError | PlatformPayoutCreatorMismatchedError

union CreateManualTransferOutput = InvalidRequestError | PlatformNotEnabledError | PlatformPartnerNotFoundError | CreateManualTransferPayload | UnauthorizedError | PlatformUnavailableSettlementDateError

union CreateOrderCancelTransferOutput = PlatformTransferAlreadyExistsError | PlatformOrderDetailMismatchedError | PlatformDiscountSharePolicyIdDuplicatedError | PlatformProductIdDuplicatedError | PlatformDiscountCancelExceededOrderCancelAmountError | CreateOrderCancelTransferPayload | UnauthorizedError | PlatformProductIdNotFoundError | PlatformCancellableDiscountAmountExceededError | PlatformCancellationAndPaymentTypeMismatchedError | PlatformTransferNotFoundError | PlatformCancellationNotFoundError | PlatformPaymentNotFoundError | PlatformCancellableProductQuantityExceededError | PlatformOrderTransferAlreadyCancelledError | InvalidRequestError | PlatformNotEnabledError | PlatformCancellableAmountExceededError | PlatformTransferDiscountSharePolicyNotFoundError | PlatformSettlementCancelAmountExceededPortOneCancelError

union CreateOrderTransferOutput = PlatformContractNotFoundError | PlatformPaymentNotFoundError | InvalidRequestError | PlatformNotEnabledError | PlatformPartnerNotFoundError | PlatformTransferAlreadyExistsError | PlatformSettlementPaymentAmountExceededPortOnePaymentError | CreateOrderTransferPayload | UnauthorizedError | PlatformProductIdDuplicatedError | PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError | PlatformAdditionalFeePoliciesNotFoundError | PlatformDiscountSharePoliciesNotFoundError | PlatformDiscountExceededOrderAmountError | PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError

"추가 수수료 정책 생성 결과"
union CreatePlatformAdditionalFeePolicyOutput = CreatePlatformAdditionalFeePayload | PlatformNotEnabledError | InvalidRequestError | PlatformAdditionalFeePolicyAlreadyExistsError | UnauthorizedError

"계약 객체 생성 결과"
union CreatePlatformContractOutput = CreatePlatformContractPayload | PlatformNotEnabledError | InvalidRequestError | PlatformContractAlreadyExistsError | UnauthorizedError

"할인 분담 정책 생성 결과"
union CreatePlatformDiscountSharePolicyOutput = CreatePlatformDiscountSharePayload | PlatformNotEnabledError | InvalidRequestError | PlatformDiscountSharePolicyAlreadyExistsError | UnauthorizedError

"파트너 생성 결과"
union CreatePlatformPartnerOutput = InvalidRequestError | PlatformPartnerIdAlreadyExistsError | UnauthorizedError | CreatePlatformPartnerPayload | PlatformNotEnabledError | PlatformContractNotFoundError

"파트너 다건 생성 결과"
union CreatePlatformPartnersOutput = InvalidRequestError | PlatformPartnerIdsAlreadyExistError | UnauthorizedError | CreatePlatformPartnersPayload | PlatformNotEnabledError | PlatformContractsNotFoundError | PlatformPartnerIdsDuplicatedError

"대량이체 생성 결과"
union CreatePlatformPayoutOutput = InvalidRequestError | ForbiddenError | PlatformNotEnabledError | CreatePlatformPayoutPayload | UnauthorizedError | PlatformOngoingPayoutExistsError | PlatformNoPayablePartnerSettlementsError

"대량이체 삭제 결과"
union DeletePlatformPayoutOutput = DeletePlatformPayoutPayload | UnauthorizedError | PlatformPayoutNotFoundError | PlatformPayoutAlreadyCompletedError | InvalidRequestError | ForbiddenError | PlatformNotEnabledError | PlatformPayoutCreatorMismatchedError

"API key 로그인 결과"
union LoginViaApiKeyOutput = LoginViaApiKeyPayload | UnauthorizedError

"가맹점 정보 조회 결과"
union MerchantOutput = Merchant | UnauthorizedError

"추가 수수료 정책 다건 조회 결과"
union PlatformAdditionalFeePoliciesOutput = PlatformAdditionalFeePoliciesPayload | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"추가 수수료 정책 필터 옵션 조회 결과"
union PlatformAdditionalFeePolicyFilterOptionsOutput = PlatformAdditionalFeePolicyFilterOptions | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"추가 수수료 정책 아이디 조회 결과"
union PlatformAdditionalFeePolicyIdOutput = PlatformAdditionalFeePolicyId | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"추가 수수료 정책 단건 조회 결과"
union PlatformAdditionalFeePolicyOutput = PlatformAdditionalFeePolicy | PlatformNotEnabledError | InvalidRequestError | PlatformAdditionalFeePolicyNotFoundError | UnauthorizedError

"추가 수수료 정책 예약 업데이트 조회 결과"
union PlatformAdditionalFeePolicyScheduleOutput = PlatformAdditionalFeePolicySchedule | PlatformNotEnabledError | InvalidRequestError | PlatformAdditionalFeePolicyNotFoundError | UnauthorizedError

"계약 필터 옵션 조회 결과"
union PlatformContractFilterOptionsOutput = PlatformContractFilterOptions | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"계약 아이디 조회 결과"
union PlatformContractIdOutput = PlatformContractId | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"계약 아이디 제안 조회 결과"
union PlatformContractIdSuggestionOutput = PlatformContractIdSuggestion | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"계약 조회 결과"
union PlatformContractOutput = PlatformContract | PlatformNotEnabledError | InvalidRequestError | PlatformContractNotFoundError | UnauthorizedError

"계약 예약 업데이트 조회 결과"
union PlatformContractScheduleOutput = PlatformContractSchedule | PlatformNotEnabledError | InvalidRequestError | PlatformContractNotFoundError | UnauthorizedError

"계약 다건 조회 결과"
union PlatformContractsOutput = PlatformContractsPayload | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"할인 분담 정책 다건 조회 결과"
union PlatformDiscountSharePoliciesOutput = PlatformDiscountSharePoliciesPayload | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"할인 분담 정책 필터 옵션 조회 결과"
union PlatformDiscountSharePolicyFilterOptionsOutput = PlatformDiscountSharePolicyFilterOptions | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"할인 분담 정책 아이디 조회 결과"
union PlatformDiscountSharePolicyIdOutput = PlatformDiscountSharePolicyId | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"할인 분담 정책 조회 결과"
union PlatformDiscountSharePolicyOutput = PlatformDiscountSharePolicy | PlatformNotEnabledError | InvalidRequestError | PlatformDiscountSharePolicyNotFoundError | UnauthorizedError

"할인 분담 정책 예약 업데이트 조회 결과"
union PlatformDiscountSharePolicyScheduleOutput = PlatformDiscountSharePolicySchedule | PlatformNotEnabledError | InvalidRequestError | PlatformDiscountSharePolicyNotFoundError | UnauthorizedError

"플랫폼 중개수수료 정보"
union PlatformFee = PlatformFixedAmountFee | PlatformFixedRateFee

"플랫폼 정보 조회 결과"
union PlatformOutput = Platform | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"파트너 현황 조회 결과"
union PlatformPartnerDashboardOutput = PlatformPartnerDashboard | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"파트너 필터 옵션 조회 결과"
union PlatformPartnerFilterOptionsOutput = PlatformPartnerFilterOptions | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"파트너 아이디 조회 결과"
union PlatformPartnerIdOutput = PlatformPartnerId | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"파트너 아이디 제안 조회 결과"
union PlatformPartnerIdSuggestionOutput = PlatformPartnerIdSuggestion | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"플랫폼 파트너 조회 결과"
union PlatformPartnerOutput = PlatformPartner | PlatformNotEnabledError | InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError

"파트너 예약 업데이트 조회 결과"
union PlatformPartnerScheduleOutput = PlatformPartnerSchedule | PlatformNotEnabledError | InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError

"정산내역 필터 옵션 조회 결과"
union PlatformPartnerSettlementFilterOptionsOutput = PlatformPartnerSettlementFilterOptions | UnauthorizedError | PlatformNotEnabledError | InvalidRequestError

"정산내역 다건 조회 결과"
union PlatformPartnerSettlementsOutput = PlatformPartnerSettlementsPayload | UnauthorizedError | PlatformNotEnabledError | InvalidRequestError

"파트너 요약 다건 조회 결과"
union PlatformPartnerSummariesOutput = PlatformPartnerSummariesPayload | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"파트너 다건 조회 결과"
union PlatformPartnersOutput = PlatformPartnersPayload | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"지급 가능한 정산일 리스트 조회 결과"
union PlatformPayableSettlementDatesOutput = PlatformPayableSettlementDatesPayload | UnauthorizedError | PlatformNotEnabledError | InvalidRequestError

union PlatformPaymentMethod = PlatformPaymentMethodCard | PlatformPaymentMethodEasyPay | PlatformPaymentMethodGiftCertificate | PlatformPaymentMethodMobile | PlatformPaymentMethodTransfer | PlatformPaymentMethodVirtualAccount

"이체 조회 결과"
union PlatformPayoutOutput = UnauthorizedError | InvalidRequestError | PlatformNotEnabledError | PlatformOngoingPayout | PlatformCompletedPayout | PlatformPayoutNotFoundError

"대량이체 내 파트너 정산 다건 조회 결과"
union PlatformPayoutPartnerSettlementsOutput = PayoutPartnerSettlementsPayload | UnauthorizedError | InvalidRequestError | PlatformNotEnabledError

"정산금 지급 시트 목록 조회 결과"
union PlatformPayoutSheetsOutput = PlatformPayoutSheetsPayload | UnauthorizedError | InvalidRequestError | PlatformNotEnabledError | PlatformPayoutNotFoundError

"플랫폼 다건 조회 결과"
union PlatformPayoutsOutput = PlatformPayoutsPayload | UnauthorizedError | InvalidRequestError | PlatformNotEnabledError

"플랫폼 정산 주기 계산 방식"
union PlatformSettlementCycleMethod = PlatformSettlementCycleMethodDaily | PlatformSettlementCycleMethodManualDates | PlatformSettlementCycleMethodMonthly | PlatformSettlementCycleMethodWeekly

union PlatformSettlementFormulaError = PlatformSettlementFormulaInvalidFunction | PlatformSettlementFormulaInvalidOperator | PlatformSettlementFormulaInvalidSyntax | PlatformSettlementFormulaInvalidVariable | PlatformSettlementFormulaUnexpectedFunctionArguments | PlatformSettlementFormulaUnknownError | PlatformSettlementFormulaUnsupportedVariable

"플랫폼 계산식 검증 응답"
union PlatformSettlementFormulaValidationOutput = PlatformSettlementFormulaValidation | UnauthorizedError | InvalidRequestError | PlatformNotEnabledError

"정산내역 대시보드 조회 결과"
union PlatformTransferDashboardOutput = PlatformTransferDashboard | UnauthorizedError | PlatformNotEnabledError | InvalidRequestError

"정산내역 필터 옵션 조회 결과"
union PlatformTransferFilterOptionsOutput = PlatformTransferFilterOptions | UnauthorizedError | PlatformNotEnabledError | InvalidRequestError

union PlatformTransferOutput = PlatformManualTransfer | PlatformTransferNotFoundError | PlatformNotEnabledError | PlatformOrderTransfer | PlatformOrderCancelTransfer | InvalidRequestError | UnauthorizedError

union PlatformTransferSummariesOutput = PlatformTransferSummariesPayload | PlatformNotEnabledError | InvalidRequestError | UnauthorizedError

"토큰 재발급 결과"
union RefreshTokenOutput = RefreshTokenPayload | UnauthorizedError

"파트너 상태 승인 거절 변경 결과"
union RejectPlatformPartnerOutput = RejectPlatformPartnerPayload | PlatformNotEnabledError | InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError

"추가 수수료 정책 예약 업데이트 재설정 결과"
union ReschedulePlatformAdditionalFeePolicyOutput = ReschedulePlatformAdditionalFeePayload | PlatformNotEnabledError | InvalidRequestError | PlatformAdditionalFeePolicyNotFoundError | UnauthorizedError

"계약 예약 업데이트 재설정 결과"
union ReschedulePlatformContractOutput = ReschedulePlatformContractPayload | PlatformNotEnabledError | InvalidRequestError | PlatformContractNotFoundError | UnauthorizedError

"할인 분담 정책 예약 업데이트 재설정 결과"
union ReschedulePlatformDiscountSharePolicyOutput = ReschedulePlatformDiscountSharePayload | PlatformNotEnabledError | InvalidRequestError | PlatformDiscountSharePolicyNotFoundError | UnauthorizedError

"파트너 예약 업데이트 재설정 결과"
union ReschedulePlatformPartnerOutput = InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError | ReschedulePlatformPartnerPayload | PlatformNotEnabledError | PlatformContractNotFoundError

"추가 수수료 정책 업데이트 예약 결과"
union SchedulePlatformAdditionalFeePolicyOutput = InvalidRequestError | PlatformAdditionalFeePolicyNotFoundError | PlatformAdditionalFeePolicyScheduleAlreadyExistsError | SchedulePlatformAdditionalFeePayload | PlatformNotEnabledError | UnauthorizedError

"계약 업데이트 예약 결과"
union SchedulePlatformContractOutput = InvalidRequestError | PlatformContractNotFoundError | PlatformContractScheduleAlreadyExistsError | SchedulePlatformContractPayload | PlatformNotEnabledError | UnauthorizedError

"할인 분담 정책 업데이트 예약 결과"
union SchedulePlatformDiscountSharePolicyOutput = InvalidRequestError | PlatformDiscountSharePolicyNotFoundError | PlatformDiscountSharePolicyScheduleAlreadyExistsError | SchedulePlatformDiscountSharePayload | PlatformNotEnabledError | UnauthorizedError

"파트너 업데이트 예약 결과"
union SchedulePlatformPartnerOutput = InvalidRequestError | PlatformPartnerNotFoundError | PlatformPartnerScheduleAlreadyExistsError | SchedulePlatformPartnerPayload | PlatformNotEnabledError | UnauthorizedError | PlatformContractNotFoundError

"파트너 예약 업데이트 결과"
union SchedulePlatformPartnersOutput = InvalidRequestError | PlatformNotEnabledError | PlatformPartnerSchedulesAlreadyExistError | SchedulePlatformPartnersPayload | UnauthorizedError | PlatformContractNotFoundError

"대량이체 파트너 정산 전체 업데이트 결과"
union UpdatePayoutAllPartnerSettlementsOutput = UpdatePayoutAllPartnerSettlementsPayload | UnauthorizedError | PlatformPayoutNotFoundError | PlatformPayoutAlreadyCompletedError | InvalidRequestError | ForbiddenError | PlatformNotEnabledError | PlatformPayoutCreatorMismatchedError

"추가 수수료 정책 업데이트 결과"
union UpdatePlatformAdditionalFeePolicyOutput = UpdatePlatformAdditionalFeePayload | PlatformNotEnabledError | InvalidRequestError | PlatformAdditionalFeePolicyNotFoundError | UnauthorizedError

"계약 업데이트 결과"
union UpdatePlatformContractOutput = UpdatePlatformContractPayload | PlatformNotEnabledError | InvalidRequestError | PlatformContractNotFoundError | UnauthorizedError

"할인 분담 정책 업데이트 결과"
union UpdatePlatformDiscountSharePolicyOutput = UpdatePlatformDiscountSharePayload | PlatformNotEnabledError | InvalidRequestError | PlatformDiscountSharePolicyNotFoundError | UnauthorizedError

"플랫폼 업데이트 결과"
union UpdatePlatformOutput = UpdatePlatformPayload | PlatformNotEnabledError | PlatformInvalidSettlementFormulaError | InvalidRequestError | UnauthorizedError

"파트너 업데이트 결과"
union UpdatePlatformPartnerOutput = InvalidRequestError | PlatformPartnerNotFoundError | UnauthorizedError | UpdatePlatformPartnerPayload | PlatformNotEnabledError | PlatformContractNotFoundError

"대량이체 파트너 정산 업데이트 결과"
union UpdatePlatformPayoutPartnerSettlementOutput = UpdatePlatformPayoutPartnerSettlementPayload | UnauthorizedError | PlatformPayoutPartnerSettlementNotFoundError | PlatformPayoutNotFoundError | InvalidRequestError | ForbiddenError | PlatformNotEnabledError | PlatformPayoutPartnerSettlementAlreadyPaidOutError | PlatformPayoutCreatorMismatchedError

"조회 시간 단위"
enum AnalyticsTimeGranularity {
  "시간"
HOUR
  "일"
DAY
  "주"
WEEK
  "월"
MONTH
}

"은행"
enum Bank {
  "한국은행"
BOK
  "산업은행"
KDB
  "기업은행"
IBK
  "국민은행"
KB
  "수협은행"
SUHYUP
  "수출입은행"
EIB
  "NH농협은행"
NH
  "지역농축협"
REGIONAL_NH
  "우리은행"
WOORI
  "SC제일은행"
SCB
  "한국씨티은행"
CITI
  "대구은행"
DAEGU
  "부산은행"
BUSAN
  "광주은행"
GWANGJU
  "제주은행"
JEJU
  "전북은행"
JEONBUK
  "경남은행"
GYEONGNAM
  "새마을금고"
KFCC
  "신협"
CREDIT_UNION
  "저축은행"
FSB
  "기타 외국계은행(중국 농업은행 등)"
MISC
  "모간스탠리은행"
MORGAN_STANLEY
  "HSBC은행"
HSBC
  "도이치은행"
DEUTSCHE
  "제이피모간체이스은행"
JPMC
  "미즈호은행"
MIZUHO
  "엠유에프지은행"
MUFG
  "BOA은행"
BOA
  "비엔피파리바은행"
BNP
  "산림조합중앙회"
NFCF
  "우체국"
EPOST
  "하나은행"
HANA
  "신한은행"
SHINHAN
  "케이뱅크"
KBANK
  "카카오뱅크"
KAKAO
  "토스뱅크"
TOSS_BANK
  "대신저축은행"
DAISHIN_SB
  "에스비아이저축은행"
SBI_SB
  "에이치케이저축은행"
HK_SB
  "웰컴저축은행"
WELCOME_SB
  "신한저축은행"
SHINHAN_SB
}

"카드사"
enum CardCompany {
  "KDB산업은행"
KOREA_DEVELOPMENT_BANK
  "새마을금고"
KFCC
  "신협"
SHINHYUP
  "우체국"
EPOST
  "저축은행"
SAVINGS_BANK_KOREA
  "카카오뱅크"
KAKAO_BANK
  "케이뱅크"
K_BANK
  "토스뱅크"
TOSS_BANK
  "우리카드"
WOORI_CARD
  "BC카드"
BC_CARD
  "광주카드"
GWANGJU_CARD
  "삼성카드"
SAMSUNG_CARD
  "신한카드"
SHINHAN_CARD
  "현대카드"
HYUNDAI_CARD
  "롯데카드"
LOTTE_CARD
  "수협카드"
SUHYUP_CARD
  "씨티카드"
CITI_CARD
  "NH카드"
NH_CARD
  "전북카드"
JEONBUK_CARD
  "제주카드"
JEJU_CARD
  "하나카드"
HANA_CARD
  "국민카드"
KOOKMIN_CARD
  "해외카드"
UNIDENTIFIED_GLOBAL_CARD
}

"통화 단위"
enum Currency {
  "대한민국 원화"
KRW
  "미국 달러"
USD
  "일본 엔화"
JPY
  EUR
  CNY
  VND
  THB
  SGD
  AUD
  HKD
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  KES
  KGS
  KHR
  KMF
  KPW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SHP
  SLE
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USN
  UYI
  UYU
  UYW
  UZS
  VED
  VES
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

"요일"
enum DayOfWeek {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

"간편 결제 수단"
enum EasyPayMethodType {
  CARD
  TRANSFER
  CHARGE
}

"간편 결제사"
enum EasyPayProvider {
  SAMSUNGPAY
  KAKAOPAY
  NAVERPAY
  PAYCO
  SSGPAY
  CHAI
  LPAY
  KPAY
  TOSSPAY
  LGPAY
  PINPAY
  APPLEPAY
  SKPAY
  TOSS_BRANDPAY
  KB_APP
}

enum PaymentMethodType {
  CARD
  TRANSFER
  VIRTUAL_ACCOUNT
  GIFT_CERTIFICATE
  MOBILE
  EASY_PAY
}

"PG사"
enum PgCompany {
  INICIS
  NICE
  KCP
  DANAL
  TOSSPAYMENTS
  MOBILIANS
  KICC
  SMARTRO
  DAOU
  BLUEWALNUT
  PAYPAL
  ALIPAY
  EXIMBAY
  PAYMENTWALL
  SETTLE
  GALAXIA
  NAVERPAY
  KAKAOPAY
  SMILEPAY
  TOSSPAY
  CHAI
  PAYCO
  PAYPLE
  SYRUP
  KSNET
  WELCOME
}

"플랫폼 계좌 상태"
enum PlatformAccountStatus {
  "계좌 인증 중"
VERIFYING
  "계좌 인증 완료됨"
VERIFIED
  "계좌 인증 실패함"
VERIFY_FAILED
  "계좌 인증 만료됨"
EXPIRED
  "알 수 없는 상태"
UNKNOWN
}

enum PlatformPartnerSettlementFilterKeywordType {
  PARTNER_ID
  PARTNER_EMAIL
  PARTNER_BUSINESS_REGISTRATION_NUMBER
  PARTNER_MEMO
  PLATFORM_FEE
  CONTRACT_MEMO
  ADDITIONAL_FEE_POLICY_ID
  ADDITIONAL_FEE_POLICY_FEE
  ADDITIONAL_FEE_POLICY_MEMO
  DISCOUNT_SHARE_POLICY_ID
  DISCOUNT_SHARE_POLICY_RATE
  DISCOUNT_SHARE_POLICY_MEMO
  PRODUCT_ID
}

"플랫폼 파트너 상태"
enum PlatformPartnerStatus {
  "승인 대기 중"
PENDING
  "승인 완료"
APPROVED
  "승인 거절"
REJECTED
}

"""
금액 부담 주체

플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
"""
enum PlatformPayer {
  "파트너가 부담하는 경우"
PARTNER
  "가맹점이 부담하는 경우"
MERCHANT
}

enum PlatformPayoutPartnerSettlementStatus {
  PAID_OUT
  WITHHELD
}

enum PlatformPayoutStatus {
  ONGOING
  COMPLETED
}

"금액에 대한 소수점 처리 방식"
enum PlatformRoundType {
  "소수점 반올림"
OFF
  "소수점 내림"
DOWN
  "소수점 올림"
UP
}

"플랫폼 정산 기준일"
enum PlatformSettlementCycleDatePolicy {
  "공휴일 전 영업일"
HOLIDAY_BEFORE
  "공휴일 후 영업일"
HOLIDAY_AFTER
  "달력일"
CALENDAR_DAY
}

"플랫폼 정산 주기 계산 방식"
enum PlatformSettlementCycleType {
  "매일 정산"
DAILY
  "매주 정해진 요일에 정산"
WEEKLY
  "매월 정해진 날(일)에 정산"
MONTHLY
  "정해진 날짜(월, 일)에 정산"
MANUAL_DATES
}

enum PlatformTransferStatus {
  SCHEDULED
  IN_PROCESS
  SETTLED
  IN_PAYOUT
  PAID_OUT
}

enum PlatformTransferType {
  ORDER
  ORDER_CANCEL
  MANUAL
}

"파트너 상태를 승인 완료로 변경하기 위한 입력 정보"
input ApprovePlatformPartnerInput {
  "파트너 아이디"
  id: ID!
  "파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다."
  memo: String
}

"추가 수수료 정책 예약 업데이트 취소를 위한 입력 정보"
input CancelPlatformAdditionalFeePolicyScheduleInput {
  "추가 수수료 정책 아이디"
  targetId: ID!
}

"계약 예약 업데이트 취소를 위한 입력 정보"
input CancelPlatformContractScheduleInput {
  "계약 아이디"
  targetId: ID!
}

"할인 분담 정책 예약 업데이트 취소를 위한 입력 정보"
input CancelPlatformDiscountSharePolicyScheduleInput {
  "할인 분담 정책 아이디"
  targetId: ID!
}

"파트너 예약 업데이트 취소를 위한 입력 정보"
input CancelPlatformPartnerScheduleInput {
  "파트너 아이디"
  targetId: ID!
}

input CompletePlatformPayoutInput {
  id: ID!
}

"플랫폼 계좌 생성을 위한 정보"
input CreatePlatformAccountInput {
  "은행"
  bank: Bank!
  "정산에 사용할 통화"
  currency: Currency!
  "계좌번호"
  number: String!
  "예금주명"
  holder: String!
}

"추가 수수료 정책 생성을 위한 입력 정보"
input CreatePlatformAdditionalFeePolicyInput {
  """
생성할 추가 수수료 정책 아이디

명시하지 않으면 id 가 임의로 생성됩니다.
"""
  plainId: String
  "수수료 정보"
  fee: PlatformFeeInput!
  "메모"
  memo: String
  "부가세 부담 주체"
  vatPayer: PlatformPayer!
}

"계약 객체 생성을 위한 입력 정보"
input CreatePlatformContractInput {
  """
계약에 부여할 고유 아이디

명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
"""
  plainId: String
  "계약 내부 표기를 위한 메모"
  memo: String
  "중개수수료"
  platformFee: PlatformFeeInput!
  "정산 주기"
  settlementCycle: PlatformSettlementCycleInput!
  "중개수수료에 대한 부가세 부담 주체"
  platformFeeVatPayer: PlatformPayer!
}

"할인 분담 정책 생성을 위한 입력 정보"
input CreatePlatformDiscountSharePolicyInput {
  """
할인 분담에 부여할 고유 아이디

명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
"""
  plainId: String
  "파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다."
  partnerShareRate: Int!
  "해당 할인 분담에 대한 메모 ex) 파트너 브랜드 쿠폰"
  memo: String
}

input CreatePlatformManualTransferInput {
  partnerPlainId: String!
  memo: String
  settlementAmount: Long!
  settlementDate: Date!
  isForTest: Boolean
}

input CreatePlatformOrderCancelTransferDiscountInput {
  sharePolicyPlainId: String!
  amount: Long!
}

input CreatePlatformOrderCancelTransferExternalCancellationDetailInput {
  cancelledAt: DateTime
}

input CreatePlatformOrderCancelTransferInput {
  partnerPlainId: String!
  paymentPlainId: String!
  cancellationPlainId: String!
  memo: String
  orderDetail: CreatePlatformOrderCancelTransferOrderDetailInput
  discounts: [CreatePlatformOrderCancelTransferDiscountInput!]!
  settlementStartDate: Date
  externalCancellationDetail: CreatePlatformOrderCancelTransferExternalCancellationDetailInput
  isForTest: Boolean
}

input CreatePlatformOrderCancelTransferOrderDetailAllInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

input CreatePlatformOrderCancelTransferOrderDetailInput {
  orderAmount: Long
  orderLines: [CreatePlatformOrderCancelTransferOrderLineInput!]
  all: CreatePlatformOrderCancelTransferOrderDetailAllInput
}

input CreatePlatformOrderCancelTransferOrderLineInput {
  productPlainId: String!
  quantity: Int!
  discounts: [CreatePlatformOrderCancelTransferDiscountInput!]!
}

input CreatePlatformOrderTransferAdditionalFeeInput {
  policyPlainId: String!
}

input CreatePlatformOrderTransferDiscountInput {
  sharePolicyPlainId: String!
  amount: Long!
}

input CreatePlatformOrderTransferExternalPaymentDetailInput {
  currency: Currency!
  orderName: String
  paidAt: DateTime
  method: PlatformPaymentMethodInput
}

input CreatePlatformOrderTransferInput {
  partnerPlainId: String!
  contractPlainId: String
  memo: String
  paymentPlainId: String!
  orderDetail: CreatePlatformOrderTransferOrderDetailInput!
  settlementStartDate: Date
  discounts: [CreatePlatformOrderTransferDiscountInput!]!
  additionalFees: [CreatePlatformOrderTransferAdditionalFeeInput!]!
  externalPaymentDetail: CreatePlatformOrderTransferExternalPaymentDetailInput
  isForTest: Boolean
}

input CreatePlatformOrderTransferOrderDetailInput {
  orderAmount: Long
  orderLines: [CreatePlatformOrderTransferOrderLineInput!]
}

input CreatePlatformOrderTransferOrderLineInput {
  product: CreatePlatformOrderTransferProductInput!
  quantity: Int!
  discounts: [CreatePlatformOrderTransferDiscountInput!]!
  additionalFees: [CreatePlatformOrderTransferAdditionalFeeInput!]!
}

input CreatePlatformOrderTransferProductInput {
  plainId: String!
  name: String!
  amount: Long!
  tag: String
}

"파트너 생성을 위한 입력 정보"
input CreatePlatformPartnerInput {
  """
파트너에 부여할 고유 아이디

가맹점 서버에 등록된 파트너 지칭 아이디와 동일하게 설정하는 것을 권장합니다. 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
"""
  plainId: String
  "파트너 법인명 혹은 이름"
  name: String!
  "파트너 이메일"
  email: String!
  """
파트너 사업자등록번호

파트너의 사업자등록번호가 존재하는 경우 명시합니다. 별도로 검증하지는 않으며, 번호와 기호 모두 입력 가능합니다.
"""
  businessRegistrationNumber: String
  "정산 계좌"
  account: CreatePlatformAccountInput!
  """
기본 계약 아이디

이미 존재하는 계약 아이디를 등록해야 합니다.
"""
  defaultContractPlainId: String!
  """
파트너에 대한 메모

총 256자까지 입력할 수 있습니다.
"""
  memo: String
  """
파트너에 부여할 태그 리스트

최대 10개까지 입력할 수 있습니다.
"""
  tags: [String!]!
}

"파트너 다건 생성을 위한 입력 정보"
input CreatePlatformPartnersInput {
  "생성할 파트너 리스트 정보"
  partners: [CreatePlatformPartnerInput!]!
}

input CreatePlatformPayoutInput {
  filter: PlatformPartnerSettlementFilterInput!
}

input DateRangeInput {
  from: Date!
  until: Date!
}

input DeletePlatformPayoutInput {
  id: ID!
}

"API key 로그인을 위한 입력 정보"
input LoginViaApiKeyInput {
  "발급받은 API key"
  apiKey: String!
}

"월 및 일자 정보"
input MonthDayInput {
  month: Int!
  day: Int!
}

"다건 조회 API 에 사용되는 페이지 입력 정보"
input PageInput {
  "0부터 시작하는 페이지 번호"
  number: Int
  "각 페이지 당 포함할 객체 수"
  size: Int
}

"추가 수수료 정책 다건 조회를 위한 필터 조건"
input PlatformAdditionalFeePolicyFilterInput {
  """
숨김 조회 여부

true 이면 숨김 처리된 추가 수수료 정책까지 조회하고, false 이면 숨김 처리되지 않은 추가 수수료 정책만 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
"""
  includeHidden: Boolean
  ids: [String!]
  vatPayers: [PlatformPayer!]
}

"계약 다건 조회를 위한 필터 조건"
input PlatformContractFilterInput {
  "하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 중개 수수료를 가진 계약만 조회합니다."
  platformFees: [PlatformFeeInput!]
  "하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 수수료 부담 주체를 가진 계약만 조회합니다."
  platformFeePayers: [PlatformPayer!]
  "하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 주기 계산 방식을 가진 계약만 조회합니다."
  cycleTypes: [PlatformSettlementCycleType!]
  "하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 기준일을 가진 계약만 조회합니다."
  datePolicies: [PlatformSettlementCycleDatePolicy!]
  """
숨김 조회 여부

true 이면 숨김 처리된 계약까지 조회하고, false 이면 숨김 처리되지 않은 계약만 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
"""
  includeHidden: Boolean
  "검색 키워드"
  keyword: PlatformContractFilterKeywordInput
}

"""
검색 키워드 입력 정보

검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 계약만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
"""
input PlatformContractFilterKeywordInput {
  "해당 키워드가 포함된 정보를 가진 계약만 조회합니다."
  all: String
  "해당 값이 포함된 id 를 가진 계약만 조회합니다."
  id: String
  "해당 값이 포함된 메모를 가진 계약만 조회합니다."
  memo: String
}

"할인 분담 정책 다건 조회를 위한 필터 조건"
input PlatformDiscountSharePolicyFilterInput {
  """
숨김 조회 여부

true 이면 숨김 처리된 할인 분담 정책까지 조회하고, false 이면 숨김 처리되지 않은 할인 분담 정책만 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
"""
  includeHidden: Boolean
  "하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 파트너 분담율을 가진 할인 분담만 조회합니다."
  partnerShareRates: [Int!]
  "검색 키워드"
  keyword: PlatformDiscountSharePolicyFilterKeywordInput
}

"""
검색 키워드 입력 정보

검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
"""
input PlatformDiscountSharePolicyFilterKeywordInput {
  "해당 값이 포함된 id 를 가진 할인 분담만 조회합니다."
  id: String
  "해당 값이 포함된 메모를 가진 할인 분담만 조회합니다."
  memo: String
  "해당 키워드가 포함된 정보를 가진 할인 분담만 조회합니다."
  all: String
}

"""
수수료 계산 방식을 특정하기 위한 입력 정보

정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
"""
input PlatformFeeInput {
  "정률 수수료"
  fixedRate: Int
  "정액 수수료"
  fixedAmount: Long
}

"파트너 필터 입력 정보"
input PlatformPartnerFilterInput {
  """
숨김 조회 여부

true 이면 숨김 처리된 파트너까지 조회하고, false 이면 숨김 처리되지 않은 파트너만 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
"""
  includeHidden: Boolean
  "하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 태그를 하나 이상 가지는 파트너만 조회합니다."
  tags: [String!]
  "하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 은행을 가진 파트너만 조회합니다."
  banks: [Bank!]
  "하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 통화를 가진 파트너만 조회합니다."
  accountCurrencies: [Currency!]
  "하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 아이디를 가진 파트너만 조회합니다."
  plainIds: [String!]
  "검색 키워드"
  keyword: PlatformPartnerFilterKeywordInput
}

"""
파트너 검색 키워드 입력 정보

검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
"""
input PlatformPartnerFilterKeywordInput {
  "해당 값이 포함된 id 를 가진 파트너만 조회합니다."
  id: String
  "해당 값이 포함된 이름 을 가진 파트너만 조회합니다."
  name: String
  "해당 값이 포함된 이메일 주소를 가진 파트너만 조회합니다."
  email: String
  "해당 값이 포함된 사업자등록번호를 가진 파트너만 조회합니다."
  businessRegistrationNumber: String
  "해당 값이 포함된 기본 계약 아이디를 가진 파트너만 조회합니다."
  defaultContractPlainId: String
  "해당 값이 포함된 메모를 가진 파트너만 조회합니다."
  memo: String
  "해당 값이 포함된 계좌번호를 가진 파트너만 조회합니다."
  accountNumber: String
  "해당 값이 포함된 계좌 예금주명을 가진 파트너만 조회합니다."
  accountHolder: String
}

input PlatformPartnerSettlementFilterInput {
  settlementDate: Date!
  settlementStartDateRange: DateRangeInput!
  contractPlainIds: [String!]
  transferTypes: [PlatformTransferType!]
  transferStatuses: [PlatformTransferStatus!]
  banks: [Bank!]
  paymentMethodTypes: [PaymentMethodType!]
  settlementCurrencies: [Currency!]
  payoutCurrencies: [Currency!]
  partnerTags: [String!]
  keyword: PlatformPartnerSettlementFilterKeywordInput
  isForTest: Boolean
}

input PlatformPartnerSettlementFilterKeywordInput {
  partnerPlainId: String
  partnerEmail: String
  partnerBusinessRegistrationNumber: String
  partnerMemo: String
  platformFee: String
  contractMemo: String
  additionalFeePolicyPlainId: String
  additionalFeePolicyFee: String
  additionalFeePolicyMemo: String
  discountSharePolicyPlainId: String
  discountSharePolicyRate: String
  discountSharePolicyMemo: String
  productPlainId: String
}

input PlatformPaymentMethodCardInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

input PlatformPaymentMethodEasyPayInput {
  provider: EasyPayProvider
  methodType: EasyPayMethodType
}

input PlatformPaymentMethodGiftCertificateInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

input PlatformPaymentMethodInput {
  card: PlatformPaymentMethodCardInput
  transfer: PlatformPaymentMethodTransferInput
  virtualAccount: PlatformPaymentMethodVirtualAccountInput
  giftCertificate: PlatformPaymentMethodGiftCertificateInput
  mobile: PlatformPaymentMethodMobileInput
  easyPay: PlatformPaymentMethodEasyPayInput
}

input PlatformPaymentMethodMobileInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

input PlatformPaymentMethodTransferInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

input PlatformPaymentMethodVirtualAccountInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

input PlatformPayoutFilterInput {
  statuses: [PlatformPayoutStatus!]
  isForTest: Boolean
}

"플랫폼 정산 주기 입력 정보"
input PlatformSettlementCycleInput {
  """
지체일 (d+n 의 n)

정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.
"""
  lagDays: Int!
  "기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다."
  datePolicy: PlatformSettlementCycleDatePolicy!
  "정산 주기 계산 방식"
  method: PlatformSettlementCycleMethodInput!
}

input PlatformSettlementCycleMethodDailyInput {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"""
플랫폼 정산 주기 계산 방식 입력 정보

하나의 하위 필드에만 값을 명시하여 요청합니다.
"""
input PlatformSettlementCycleMethodInput {
  "매일 정산"
  daily: PlatformSettlementCycleMethodDailyInput
  "매주 정해진 요일에 정산"
  weekly: PlatformSettlementCycleMethodWeeklyInput
  "매월 정해진 날(일)에 정산"
  monthly: PlatformSettlementCycleMethodMonthlyInput
  "정해진 날짜(월, 일)에 정산"
  manualDates: PlatformSettlementCycleMethodManualDatesInput
}

input PlatformSettlementCycleMethodManualDatesInput {
  dates: [MonthDayInput!]!
}

input PlatformSettlementCycleMethodMonthlyInput {
  daysOfMonth: [Int!]!
}

input PlatformSettlementCycleMethodWeeklyInput {
  daysOfWeek: [DayOfWeek!]!
}

input PlatformTransferFilterInput {
  settlementStartDateRange: DateRangeInput
  settlementDateRange: DateRangeInput
  partnerTags: [String!]
  contractPlainIds: [String!]
  discountSharePolicyPlainIds: [String!]
  additionalFeePolicyPlainIds: [String!]
  paymentMethodTypes: [PaymentMethodType!]
  channelKeys: [String!]
  types: [PlatformTransferType!]
  statuses: [PlatformTransferStatus!]
  keyword: PlatformTransferFilterKeywordInput
  isForTest: Boolean
}

input PlatformTransferFilterKeywordInput {
  all: String
  paymentId: String
  transferId: String
  transferMemo: String
  productId: String
  productName: String
  partnerId: String
  partnerName: String
  partnerMemo: String
}

"토큰 재발급을 위한 입력 정보"
input RefreshTokenInput {
  "리프레시 토큰"
  refreshToken: String!
}

"파트너 상태를 승인 거절로 변경하기 위한 입력 정보"
input RejectPlatformPartnerInput {
  "파트너 아이디"
  id: ID!
  "파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다."
  memo: String
}

"추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보"
input ReschedulePlatformAdditionalFeePolicyInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformAdditionalFeePolicyInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"계약 예약 업데이트 재설정을 위한 입력 정보"
input ReschedulePlatformContractInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformContractInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보"
input ReschedulePlatformDiscountSharePolicyInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformDiscountSharePolicyInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"파트너 예약 업데이트 재설정을 위한 입력 정보"
input ReschedulePlatformPartnerInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformPartnerInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"추가 수수료 정책 업데이트 예약을 위한 입력 정보"
input SchedulePlatformAdditionalFeePolicyInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformAdditionalFeePolicyInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"계약 업데이트 예약을 위한 입력 정보"
input SchedulePlatformContractInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformContractInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"할인 분담 정책 업데이트 예약을 위한 입력 정보"
input SchedulePlatformDiscountSharePolicyInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformDiscountSharePolicyInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

"파트너 업데이트 예약을 위한 입력 정보"
input SchedulePlatformPartnerInput {
  "반영할 업데이트 내용"
  update: UpdatePlatformPartnerInput!
  "업데이트 적용 시점"
  appliedAt: DateTime!
}

input SchedulePlatformPartnersInput {
  filter: PlatformPartnerFilterInput
  update: SchedulePlatformPartnersUpdateInput!
  appliedAt: DateTime!
}

"파트너 계좌 업데이트를 위한 입력 정보"
input SchedulePlatformPartnersUpdateAccountInput {
  "은행"
  bank: Bank!
  "정산에 사용할 통화"
  currency: Currency!
  "계좌번호"
  number: String!
  "예금주명"
  holder: String!
}

input SchedulePlatformPartnersUpdateInput {
  name: String
  email: String
  "필드를 명시하지 않으면 업데이트하지 않고, 빈 문자열로 명시하면 빈 값으로 업데이트합니다."
  businessRegistrationNumber: String
  account: SchedulePlatformPartnersUpdateAccountInput
  defaultContractPlainId: String
  memo: String
  tags: [String!]
  isHidden: Boolean
}

input UpdatePayoutAllPartnerSettlementsInput {
  payoutId: ID!
  status: PlatformPayoutPartnerSettlementStatus!
}

"""
추가 수수료 정책 업데이트를 위한 입력 정보

값이 명시하지 않은 필드는 업데이트되지 않습니다.
"""
input UpdatePlatformAdditionalFeePolicyInput {
  "업데이트할 추가 수수료 정책 아이디"
  id: ID!
  "책정 수수료"
  fee: PlatformFeeInput
  "해당 추가 수수료 정책에 대한 메모"
  memo: String
  "부가세를 부담할 주체"
  vatPayer: PlatformPayer
  "숨김 여부"
  isHidden: Boolean
}

"""
계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.

값이 명시되지 않은 필드는 업데이트되지 않습니다.
"""
input UpdatePlatformContractInput {
  "업데이트할 계약 아이디"
  id: ID!
  "계약 내부 표기를 위한 메모"
  memo: String
  "중개수수료"
  platformFee: PlatformFeeInput
  "정산 주기"
  settlementCycle: PlatformSettlementCycleInput
  "중개수수료에 대한 부가세 부담 주체"
  platformFeeVatPayer: PlatformPayer
  "숨김 여부"
  isHidden: Boolean
}

"""
할인 분담 정책 업데이트를 위한 입력 정보

값이 명시되지 않은 필드는 업데이트하지 않습니다.
"""
input UpdatePlatformDiscountSharePolicyInput {
  "업데이트할 할인 분담 정책 아이디"
  id: ID!
  """
할인 분담율

파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
"""
  partnerShareRate: Int
  "해당 할인 분담에 대한 메모"
  memo: String
  "숨김 여부"
  isHidden: Boolean
}

"""
플랫폼 업데이트를 위한 입력 정보

값이 명시되지 않은 필드는 업데이트하지 않습니다.
"""
input UpdatePlatformInput {
  "파트너 정산금액의 소수점 처리 방식"
  roundType: PlatformRoundType
  "수수료 및 할인 분담 정책 관련 계산식"
  settlementFormula: UpdatePlatformSettlementFormulaInput
}

"파트너 계좌 업데이트를 위한 입력 정보"
input UpdatePlatformPartnerAccountInput {
  "은행"
  bank: Bank!
  "정산에 사용할 통화"
  currency: Currency!
  "계좌번호"
  number: String!
  "예금주명"
  holder: String!
}

"""
파트너 업데이트를 위한 입력 정보

값이 명시되지 않은 필드는 업데이트되지 않습니다.
"""
input UpdatePlatformPartnerInput {
  "업데이트할 파트너의 고유 아이디"
  id: ID!
  "파트너 법인명 혹은 이름"
  name: String
  "파트너 이메일"
  email: String
  "파트너의 사업자등록번호. 개인 혹은 법인 사업자일 때만 명시합니다."
  businessRegistrationNumber: String
  "정산 계좌"
  account: UpdatePlatformPartnerAccountInput
  "파트너에 설정된 기본 계약 아이디"
  defaultContractPlainId: String
  "파트너에 대한 메모"
  memo: String
  "파트너의 태그 리스트"
  tags: [String!]
  "숨김 여부"
  isHidden: Boolean
}

input UpdatePlatformPayoutPartnerSettlementInput {
  id: ID!
  status: PlatformPayoutPartnerSettlementStatus!
}

"""
플랫폼 업데이트 시 변경할 계산식 정보

값이 명시되지 않은 필드는 업데이트하지 않습니다.
"""
input UpdatePlatformSettlementFormulaInput {
  "플랫폼 수수료 계산식"
  platformFee: String
  "할인 분담액 계산식"
  discountShare: String
  "추가 수수료 계산식"
  additionalFee: String
}

"PortOne Public API 요청이 실패했을 때 발생하는 에러를 의미합니다."
interface Error {
  message: String
}

"""
Global Object Identification 지원을 위한 인터페이스.
Node 를 상속받는 타입들은 node(id: ID!) 쿼리를 통해 조회할 수 있습니다.
"""
interface Node {
  "Global Object Identification 에 사용할 수 있는 GraphQL 상의 식별자로, global uniqueness 가 보장되며 ID 타입을 가집니다."
  id: ID!
  "포트원 도메인 내에서 사용되는 식별자로, GraphQL 을 제외한 모든 곳 (REST API, SDK, etc...) 에서 사용되며 String 타입을 가집니다."
  plainId: String!
}

interface PlatformPartnerSettlement {
  partner: PlatformPartnerSettlementPartner!
  settlementDate: Date!
  isForTest: Boolean!
  payoutCurrency: Currency!
  settlementCurrency: Currency!
}

interface PlatformPayment {
  method: PlatformPaymentMethod
  paidAt: DateTime
  paymentPlainId: String!
  orderName: String
  currency: Currency!
}

interface PlatformPayout {
  partnerSettlements(page: PageInput): PlatformPayoutPartnerSettlementsOutput! @hidden @unstable
  plainId: String!
  creator: PlatformPayoutCreator!
  filter: PlatformPartnerSettlementFilter!
  settlementDate: Date!
  id: ID!
  sheets: PlatformPayoutSheetsOutput! @hidden @unstable
  summary: PlatformPayoutSummary!
  createdAt: DateTime!
}

interface PlatformTransfer {
  plainId: String!
  payoutId: ID
  partner: PlatformPartner!
  payoutPlainId: String
  settlementDate: Date!
  status: PlatformTransferStatus!
  isForTest: Boolean!
  memo: String
  id: ID!
  settlementCurrency: Currency!
}

interface PlatformTransferSummary {
  transferPlainId: String!
  partner: PlatformTransferSummaryPartner!
  settlementDate: Date!
  status: PlatformTransferStatus!
  isForTest: Boolean!
  memo: String
  transferId: ID!
  settlementCurrency: Currency!
}

interface PlatformTransferSummaryPayment {
  paymentPlainId: String!
  methodType: PaymentMethodType
  orderName: String
  currency: Currency!
}

"가맹점의 analytics 관련 정보"
type Analytics {
  "가맹점의 결제 현황을 조회합니다."
  paymentChart("조회할 결제 현황의 시작 시간" from: DateTime!, "조회할 결제 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean, """결제 현황 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!): AnalyticsPaymentChartOutput! @unstable
  "가맹점의 평균 거래액 현황을 조회합니다."
  averageAmountChart("조회할 평균 거래액 현황의 시작 시간" from: DateTime!, "조회할 평균 거래액 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """평균 거래액 현황 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!): AnalyticsAverageAmountChartOutput! @unstable
  "가맹점의 결제수단 현황을 조회합니다."
  paymentMethodChart("조회할 결제수단 현황의 시작 시간" from: DateTime!, "조회할 결제수단 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!): AnalyticsPaymentMethodChartOutput! @unstable
  "가맹점의 결제수단 트렌드를 조회합니다."
  paymentMethodTrendChart("조회할 결제수단 트렌드의 시작 시간" from: DateTime!, "조회할 결제수단 트렌드의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """결제 결제수단 트렌드 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!): AnalyticsPaymentMethodTrendChartOutput! @unstable
  "가맹점의 카드결제 현황을 조회합니다."
  cardChart("조회할 카드결제 현황의 시작 시간" from: DateTime!, "조회할 카드결제 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """카드결제 현황 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!): AnalyticsCardChartOutput! @unstable
  "가맹점의 카드사별 결제 현황을 조회합니다."
  cardCompanyChart("조회할 카드사별 결제 현황의 시작 시간" from: DateTime!, "조회할 카드사별 결제 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """카드사별 결제 현황 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!, "조회할 카드사" cardCompanies: [CardCompany!]!, "나머지 집계에 포함되지 않을 카드사" excludesFromRemainders: [CardCompany!]!): AnalyticsCardCompanyChartOutput! @unstable
  "가맹점의 간편결제 현황을 조회합니다."
  easyPayChart("조회할 간편결제 현황의 시작 시간" from: DateTime!, "조회할 간편결제 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """간편결제 현황 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!): AnalyticsEasyPayChartOutput! @unstable
  "가맹점의 간편결제사별 결제 현황을 조회합니다."
  easyPayProviderChart("조회할 간편결제사별 결제 현황의 시작 시간" from: DateTime!, "조회할 간편결제사별 결제 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """간편결제사별 결제 현황 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!, "조회할 간편결제사" easyPayProviders: [EasyPayProvider!]!, "나머지 집계에 포함되지 않을 간편결제사" excludesFromRemainders: [EasyPayProvider!]!): AnalyticsEasyPayProviderChartOutput! @unstable
  "가맹점의 결제대행사 현황을 조회합니다."
  pgCompanyChart("조회할 결제대행사 현황의 시작 시간" from: DateTime!, "조회할 결제대행사 현황의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!): AnalyticsPgCompanyChartOutput! @unstable
  "가맹점의 결제대행사별 거래 추이를 조회합니다."
  pgCompanyTrendChart("조회할 결제대행사별 거래 추이의 시작 시간" from: DateTime!, "조회할 결제대행사별 거래 추이의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!, """결제취소건 제외 여부

true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.""" excludeCancelled: Boolean!, """결제 결제대행사별 거래 추이 조회 단위

시간별, 월별 단위만 지원됩니다.""" timeGranularity: AnalyticsTimeGranularity!, "조회할 결제대행사" pgCompanies: [PgCompany!]!): AnalyticsPgCompanyTrendChartOutput! @unstable
  "가맹점의 해외 결제 사용 여부를 조회합니다."
  overseasPaymentUsage: AnalyticsOverseasPaymentUsageOutput! @unstable
  "가맹점의 환불율을 조회합니다."
  cancellationRate("환불율 조회 기간의 시작 시간" from: DateTime!, "환불율 조회 기간의 끝 시간" until: DateTime!, """조회할 결제 통화

입력된 통화로 발생한 결제내역만 응답에 포함됩니다.""" currency: Currency!): AnalyticsCancellationRateOutput! @unstable
}

"가맹점의 평균 거래액 현황 조회 응답"
type AnalyticsAverageAmountChart {
  stats: [AnalyticsAverageAmountChartStat!]!
}

"특정 시점의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다."
type AnalyticsAverageAmountChartStat {
  "시점"
  timestamp: DateTime!
  "건별 평균 거래액"
  paymentAverageAmount: Long!
  "고객 당 평균 거래액"
  customerAverageAmount: Long!
}

"가맹점의 환불율 정보"
type AnalyticsCancellationRate {
  cancellationRate: Float!
}

"가맹점의 카드결제 현황 차트 정보"
type AnalyticsCardChart {
  stats: [AnalyticsCardChartStat!]!
}

"특정 시점의 카드결제 거래 건 수와 금액을 나타냅니다."
type AnalyticsCardChartStat {
  "시점"
  timestamp: DateTime!
  "거래액"
  amount: Long!
  "거래 건수"
  count: Long!
}

"가맹점의 카드사별 결제 현황 조회 응답"
type AnalyticsCardCompanyChart {
  stats: [AnalyticsCardCompanyChartStat!]!
  remainderStats: [AnalyticsCardCompanyChartRemainderStat!]!
  summary: AnalyticsCardCompanyChartSummary!
}

"특정 시점의 나머지 카드사들의 결제금액, 결제 건수를 나타냅니다."
type AnalyticsCardCompanyChartRemainderStat {
  "시점"
  timestamp: DateTime!
  "결제금액"
  amount: Long!
  "결제 건수"
  count: Long!
}

"특정 시점의 카드사 별 결제금액, 결제 건수를 나타냅니다."
type AnalyticsCardCompanyChartStat {
  "시점"
  timestamp: DateTime!
  "카드사"
  cardCompany: CardCompany!
  "결제금액"
  amount: Long!
  "결제 건수"
  count: Long!
}

"결제금액, 결제 건수의 총합을 나타냅니다."
type AnalyticsCardCompanyChartSummary {
  "결제금액 합"
  totalAmount: Long!
  "결제 건수 합"
  totalCount: Long!
}

"가맹점의 간편결제 현황 차트 정보"
type AnalyticsEasyPayChart {
  stats: [AnalyticsEasyPayChartStat!]!
}

"특정 시점의 간편결제 거래 건수와 금액을 나타냅니다."
type AnalyticsEasyPayChartStat {
  "시점"
  timestamp: DateTime!
  "거래액"
  amount: Long!
  "거래 건수"
  count: Long!
}

"가맹점의 간편결제사별 결제 현황 차트 정보"
type AnalyticsEasyPayProviderChart {
  stats: [AnalyticsEasyPayProviderChartStat!]!
  remainderStats: [AnalyticsEasyPayProviderChartRemainderStat!]!
  summary: AnalyticsEasyPayProviderChartSummary!
}

"특정 시점의 나머지 간편결제사들의 결제금액, 결제 건수를 나타냅니다."
type AnalyticsEasyPayProviderChartRemainderStat {
  "시점"
  timestamp: DateTime!
  "결제금액"
  amount: Long!
  "결제 건수"
  count: Long!
}

"특정 시점의 간편결제사별 결제금액, 결제 건수를 나타냅니다."
type AnalyticsEasyPayProviderChartStat {
  "시점"
  timestamp: DateTime!
  "간편결제사"
  easyPayProvider: EasyPayProvider!
  "결제금액"
  amount: Long!
  "결제 건수"
  count: Long!
}

"결제금액, 결제 건수의 총합을 나타냅니다."
type AnalyticsEasyPayProviderChartSummary {
  "결제금액의 합"
  totalAmount: Long!
  "결제 건수의 합"
  totalCount: Long!
}

"가맹점의 해외 결제 사용 여부"
type AnalyticsOverseasPaymentUsage {
  isUsing: Boolean!
}

"가맹점의 결제 현황 차트 정보"
type AnalyticsPaymentChart {
  stats: [AnalyticsPaymentChartStat!]!
  summary: AnalyticsPaymentChartSummary!
}

"특정 시점의 거래 건 수와 금액을 나타냅니다."
type AnalyticsPaymentChartStat {
  "시점"
  timestamp: DateTime!
  "거래액"
  amount: Long!
  "거래 건수"
  count: Long!
}

"월간, 주간, 일간 최고/최저 거래액 시점을 나타냅니다."
type AnalyticsPaymentChartSummary {
  "월간 최고 거래액 발생일"
  highestDateInMonth: Long
  "월간 최저 거래액 발생일"
  lowestDateInMonth: Long
  "주간 최고 거래액 발생 요일"
  highestDayInWeek: DayOfWeek
  "주간 최저 거래액 발생 요일"
  lowestDayInWeek: DayOfWeek
  "일간 최고 거래액 발생 시간"
  highestHourInDay: Long!
  "일간 최저 거래액 발생 시간"
  lowestHourInDay: Long!
}

"가맹점의 결제수단 현황 차트 정보"
type AnalyticsPaymentMethodChart {
  stats: [AnalyticsPaymentMethodChartStat!]!
}

"결제수단별 결제금액, 결제 건수를 나타냅니다."
type AnalyticsPaymentMethodChartStat {
  "결제수단"
  paymentMethod: PaymentMethodType!
  "결제수단별 결제금액"
  amount: Long!
  "결제수단별 결제 건수"
  count: Long!
}

"가맹점의 결제수단 트렌드 차트 정보"
type AnalyticsPaymentMethodTrendChart {
  """
결제수단별 결제금액, 결제 건수 데이터

(timestamp, paymentMethod) 를 기준으로 오름차순 정렬되어 주어집니다.
"""
  stats: [AnalyticsPaymentMethodTrendChartStat!]!
}

"특정 시점의 결제수단별 결제금액, 결제 건수를 나타냅니다."
type AnalyticsPaymentMethodTrendChartStat {
  "시점"
  timestamp: DateTime!
  "결제수단"
  paymentMethod: PaymentMethodType!
  "결제금액"
  amount: Long!
  "결제 건수"
  count: Long!
}

"가맹점의 결제대행사 현황 차트 정보"
type AnalyticsPgCompanyChart {
  stats: [AnalyticsPgCompanyChartStat!]!
}

"결제대행사별 결제금액, 결제 건수를 나타냅니다."
type AnalyticsPgCompanyChartStat {
  "결제대행사"
  pgCompany: PgCompany!
  "결제대행사별 결제금액"
  amount: Long!
  "결제대행사별 결제 건수"
  count: Long!
}

"가맹점의 결제대행사별 거래 추이 차트 정보"
type AnalyticsPgCompanyTrendChart {
  stats: [AnalyticsPgCompanyTrendChartStat!]!
}

"특정 시점의 결제대행사 별 결제금액, 결제 건수를 나타냅니다."
type AnalyticsPgCompanyTrendChartStat {
  "시점"
  timestamp: DateTime!
  "결제대행사"
  pgCompany: PgCompany!
  "결제금액"
  amount: Long!
  "결제 건수"
  count: Long!
}

"파트너 승인 성공 응답"
type ApprovePlatformPartnerPayload {
  "승인된 파트너"
  partner: PlatformPartner!
}

"추가 수수료 정책 예약 업데이트 취소 성공 응답"
type CancelPlatformAdditionalFeePolicySchedulePayload {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"계약 예약 업데이트 취소 성공 응답"
type CancelPlatformContractSchedulePayload {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"할인 분담 정책 예약 업데이트 취소 성공 응답"
type CancelPlatformDiscountSharePolicySchedulePayload {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"파트너 예약 업데이트 취소 성공 응답"
type CancelPlatformPartnerSchedulePayload {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"요청된 채널이 존재하지 않는 경우"
type ChannelNotFoundError implements Error {
  message: String
}

type CompletePlatformPayoutPayload {
  payout: PlatformPayout!
}

type CreateManualTransferPayload {
  transfer: PlatformManualTransfer!
}

type CreateOrderCancelTransferPayload {
  transfer: PlatformOrderCancelTransfer!
}

type CreateOrderTransferPayload {
  transfer: PlatformOrderTransfer!
}

"플랫폼 생성 성공 응답 정보"
type CreatePlatformAdditionalFeePayload {
  "생성된 추가 수수료 정책"
  additionalFeePolicy: PlatformAdditionalFeePolicy!
}

"계약 객체 생성 성공 응답"
type CreatePlatformContractPayload {
  "생성된 계약 객체"
  contract: PlatformContract!
}

"할인 분담 정책 생성 성공 응답"
type CreatePlatformDiscountSharePayload {
  "생성된 할인 분담 정책"
  discountSharePolicy: PlatformDiscountSharePolicy!
}

"파트너 생성 성공 응답"
type CreatePlatformPartnerPayload {
  "생성된 파트너"
  partner: PlatformPartner!
}

"파트너 다건 생성 성공 응답"
type CreatePlatformPartnersPayload {
  "생성된 파트너 리스트"
  partners: [PlatformPartner!]!
}

type CreatePlatformPayoutPayload {
  payout: PlatformPayout!
}

type DateRange {
  from: Date!
  until: Date!
}

type DeletePlatformPayoutPayload {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"요청이 거절된 경우"
type ForbiddenError implements Error {
  message: String
}

"본인인증 건이 이미 API로 요청된 상태인 경우"
type IdentityVerificationAlreadySentError implements Error {
  message: String
}

"본인인증 건이 이미 인증 완료된 상태인 경우"
type IdentityVerificationAlreadyVerifiedError implements Error {
  message: String
}

"요청된 본인인증 건이 존재하지 않는 경우"
type IdentityVerificationNotFoundError implements Error {
  message: String
}

"본인인증 건이 API로 요청된 상태가 아닌 경우"
type IdentityVerificationNotSentError implements Error {
  message: String
}

"""
요청된 입력 정보가 유효하지 않은 경우

허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
"""
type InvalidRequestError implements Error {
  message: String
}

"API key 로그인 성공 응답"
type LoginViaApiKeyPayload {
  """
인증에 사용하는 엑세스 토큰

하루의 유효기간을 가지고 있습니다.
"""
  accessToken: String!
  """
토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰

일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
"""
  refreshToken: String!
}

"가맹점 정보"
type Merchant implements Node {
  "가맹점 아이디"
  plainId: String!
  id: ID!
  """
가맹점의 플랫폼 정보를 조회합니다.
요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
"""
  platform: PlatformOutput!
  "리포트 정보"
  analytics: Analytics!
}

"월 및 일자 정보"
type MonthDay {
  month: Int!
  day: Int!
}

type Mutation {
  """
API key 를 사용한 토큰 발급

API key 를 통해 API 인증에 사용할 토큰을 가져옵니다.
"""
  loginViaApiKey(input: LoginViaApiKeyInput!): LoginViaApiKeyOutput!
  """
토큰 갱신

리프레시 토큰을 사용해 유효기간이 연장된 새로운 토큰을 재발급합니다.
"""
  refreshToken(input: RefreshTokenInput!): RefreshTokenOutput!
  """
가맹점의 플랫폼 관련 정보를 업데이트합니다.
요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
"""
  updatePlatform(input: UpdatePlatformInput!): UpdatePlatformOutput!
  "새로운 할인 분담을 생성합니다."
  createPlatformDiscountSharePolicy(input: CreatePlatformDiscountSharePolicyInput!): CreatePlatformDiscountSharePolicyOutput!
  "주어진 아이디에 대응되는 할인 분담을 업데이트합니다."
  updatePlatformDiscountSharePolicy(input: UpdatePlatformDiscountSharePolicyInput!): UpdatePlatformDiscountSharePolicyOutput!
  "주어진 아이디에 대응되는 할인 분담에 업데이트를 예약합니다."
  schedulePlatformDiscountSharePolicy(input: SchedulePlatformDiscountSharePolicyInput!): SchedulePlatformDiscountSharePolicyOutput! @unstable
  "주어진 아이디에 대응되는 할인 분담에 예약 업데이트를 재설정합니다."
  reschedulePlatformDiscountSharePolicy(input: ReschedulePlatformDiscountSharePolicyInput!): ReschedulePlatformDiscountSharePolicyOutput! @unstable
  "주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 취소합니다."
  cancelPlatformDiscountSharePolicySchedule(input: CancelPlatformDiscountSharePolicyScheduleInput!): CancelPlatformDiscountSharePolicyScheduleOutput! @unstable
  "새로운 추가 수수료 정책을 생성합니다."
  createPlatformAdditionalFeePolicy(input: CreatePlatformAdditionalFeePolicyInput!): CreatePlatformAdditionalFeePolicyOutput!
  "주어진 아이디에 대응되는 추가 수수료 정책을 업데이트합니다."
  updatePlatformAdditionalFeePolicy(input: UpdatePlatformAdditionalFeePolicyInput!): UpdatePlatformAdditionalFeePolicyOutput!
  "주어진 아이디에 대응되는 추가 수수료 정책에 업데이트를 예약합니다."
  schedulePlatformAdditionalFeePolicy(input: SchedulePlatformAdditionalFeePolicyInput!): SchedulePlatformAdditionalFeePolicyOutput! @unstable
  "주어진 아이디에 대응되는 추가 수수료 정책에 예약 업데이트를 재설정합니다."
  reschedulePlatformAdditionalFeePolicy(input: ReschedulePlatformAdditionalFeePolicyInput!): ReschedulePlatformAdditionalFeePolicyOutput! @unstable
  "주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 취소합니다."
  cancelPlatformAdditionalFeePolicySchedule(input: CancelPlatformAdditionalFeePolicyScheduleInput!): CancelPlatformAdditionalFeePolicyScheduleOutput! @unstable
  "새로운 파트너를 생성합니다."
  createPlatformPartner(input: CreatePlatformPartnerInput!): CreatePlatformPartnerOutput!
  "새로운 파트너를 다건 생성합니다."
  createPlatformPartners(input: CreatePlatformPartnersInput!): CreatePlatformPartnersOutput!
  "주어진 아이디에 대응되는 파트너 정보를 업데이트합니다."
  updatePlatformPartner(input: UpdatePlatformPartnerInput!): UpdatePlatformPartnerOutput!
  "주어진 아이디에 대응되는 파트너 상태를 승인 완료로 변경합니다."
  approvePlatformPartner(input: ApprovePlatformPartnerInput!): ApprovePlatformPartnerOutput! @hidden @unstable
  "주어진 아이디에 대응되는 파트너 상태를 승인 거절로 변경합니다."
  rejectPlatformPartner(input: RejectPlatformPartnerInput!): RejectPlatformPartnerOutput! @hidden @unstable
  "주어진 아이디에 대응되는 파트너에 업데이트를 예약합니다."
  schedulePlatformPartner(input: SchedulePlatformPartnerInput!): SchedulePlatformPartnerOutput! @unstable
  schedulePlatformPartners(input: SchedulePlatformPartnersInput!): SchedulePlatformPartnersOutput! @unstable
  "주어진 아이디에 대응되는 파트너에 예약 업데이트를 재설정합니다."
  reschedulePlatformPartner(input: ReschedulePlatformPartnerInput!): ReschedulePlatformPartnerOutput! @unstable
  "주어진 아이디에 대응되는 파트너의 예약 업데이트를 취소합니다."
  cancelPlatformPartnerSchedule(input: CancelPlatformPartnerScheduleInput!): CancelPlatformPartnerScheduleOutput! @unstable
  "새로운 계약을 생성합니다."
  createPlatformContract(input: CreatePlatformContractInput!): CreatePlatformContractOutput!
  "주어진 아이디에 대응되는 계약을 업데이트합니다."
  updatePlatformContract(input: UpdatePlatformContractInput!): UpdatePlatformContractOutput!
  "주어진 아이디에 대응되는 계약에 업데이트를 예약합니다."
  schedulePlatformContract(input: SchedulePlatformContractInput!): SchedulePlatformContractOutput! @unstable
  "주어진 아이디에 대응되는 계약에 예약 업데이트를 재설정합니다."
  reschedulePlatformContract(input: ReschedulePlatformContractInput!): ReschedulePlatformContractOutput! @unstable
  "주어진 아이디에 대응되는 계약의 예약 업데이트를 취소합니다."
  cancelPlatformContractSchedule(input: CancelPlatformContractScheduleInput!): CancelPlatformContractScheduleOutput! @unstable
  createPlatformOrderTransfer(input: CreatePlatformOrderTransferInput!): CreateOrderTransferOutput!
  createPlatformOrderCancelTransfer(input: CreatePlatformOrderCancelTransferInput!): CreateOrderCancelTransferOutput!
  createPlatformManualTransfer(input: CreatePlatformManualTransferInput!): CreateManualTransferOutput!
  createPlatformPayout(input: CreatePlatformPayoutInput!): CreatePlatformPayoutOutput! @hidden @unstable
  completePlatformPayout(input: CompletePlatformPayoutInput!): CompletePlatformPayoutOutput! @hidden @unstable
  deletePlatformPayout(input: DeletePlatformPayoutInput!): DeletePlatformPayoutOutput! @hidden @unstable
  updatePlatformPayoutPartnerSettlement(input: UpdatePlatformPayoutPartnerSettlementInput!): UpdatePlatformPayoutPartnerSettlementOutput! @hidden @unstable
  updatePlatformPayoutAllPartnerSettlements(input: UpdatePayoutAllPartnerSettlementsInput!): UpdatePayoutAllPartnerSettlementsOutput! @hidden @unstable
}

"반환된 페이지 결과 정보"
type PageInfo {
  "요청된 페이지 번호"
  number: Int!
  "요청된 페이지 당 객체 수"
  size: Int!
  "실제 반환된 객체 수"
  totalCount: Int!
}

type PayoutPartnerSettlementsPayload {
  items: [PlatformPayoutPartnerSettlement!]!
  page: PageInfo!
}

type PayoutSheet {
  payoutPlainId: String!
  contractPlainId: String
  settlementCurrency: Currency!
  payoutCurrency: Currency!
  name: String!
}

"PG사에서 오류가 발생한 경우"
type PgProviderError implements Error {
  message: String
  pgCode: String!
  pgMessage: String!
}

"가맹점의 플랫폼 기능 관련 정보"
type Platform implements Node {
  "해당 플랫폼의 가맹점 아이디"
  plainId: String!
  id: ID!
  "파트너 정산금액의 소수점 처리 방식"
  roundType: PlatformRoundType!
  "수수료 및 할인 분담 정책 관련 계산식"
  settlementFormula: PlatformSettlementFormula!
  settlementFormulaValidation(platformFee: String, discountShare: String, additionalFee: String): PlatformSettlementFormulaValidationOutput! @hidden @unstable
  "주어진 아이디에 대응되는 할인 분담을 조회합니다."
  discountSharePolicy("조회할 할인 분담 정책 아이디" id: ID!): PlatformDiscountSharePolicyOutput!
  "여러 할인 분담을 조회합니다."
  discountSharePolicies("요청할 페이지 정보" page: PageInput, "조회할 할인 분담 정책 조건 필터" filter: PlatformDiscountSharePolicyFilterInput): PlatformDiscountSharePoliciesOutput! @unstable
  "주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 조회합니다."
  discountSharePolicySchedule(targetId: ID!): PlatformDiscountSharePolicyScheduleOutput! @unstable
  "할인 분담 정책 다건 조회 시 필요한 필터 옵션을 조회합니다."
  discountSharePolicyFilterOptions(includeHidden: Boolean): PlatformDiscountSharePolicyFilterOptionsOutput! @unstable
  discountSharePolicyId(plainId: String!): PlatformDiscountSharePolicyIdOutput! @hidden @unstable
  "주어진 아이디에 대응되는 추가 수수료 정책을 조회합니다."
  additionalFeePolicy(id: ID!): PlatformAdditionalFeePolicyOutput!
  "여러 추가 수수료 정책을 조회합니다."
  additionalFeePolicies("요청할 페이지 정보" page: PageInput!, "조회할 추가 수수료 정책 조건 필터" filter: PlatformAdditionalFeePolicyFilterInput): PlatformAdditionalFeePoliciesOutput! @unstable
  "주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 조회합니다."
  additionalFeePolicySchedule("추가 수수료 정책 아이디" targetId: ID!): PlatformAdditionalFeePolicyScheduleOutput! @unstable
  "추가 수수료 정책 다건 조회 시 필요한 필터 옵션을 조회합니다."
  additionalFeePolicyFilterOptions("""숨김 조회 여부

true 이면 숨김 처리된 추가 수수료 정책의 필터 옵션까지 조회하고, false 이면 숨김 처리되지 않은 추가 수수료 정책의 필터 옵션만 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.""" includeHidden: Boolean): PlatformAdditionalFeePolicyFilterOptionsOutput! @unstable
  additionalFeePolicyId(plainId: String!): PlatformAdditionalFeePolicyIdOutput! @hidden @unstable
  "파트너 객체를 조회합니다."
  partner("조회하고 싶은 파트너 아이디" id: ID!): PlatformPartnerOutput!
  "여러 파트너를 조회합니다."
  partners("요청할 페이지 정보" page: PageInput, "조회할 파트너 조건 필터" filter: PlatformPartnerFilterInput): PlatformPartnersOutput! @unstable
  "파트너 현황을 조회합니다."
  partnerDashboard("""숨김 조회 여부

true 이면 숨김 처리된 파트너까지 조회하고, false 이면 숨김 처리되지 않은 파트너만 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.""" includeHidden: Boolean, """테스트 조회 여부

true 이면 isForTest 가 true 인 파트너들을 조회하고, false 이면 isForTest 가 false 인 파트너들을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.""" isForTest: Boolean): PlatformPartnerDashboardOutput! @hidden @unstable
  "주어진 아이디에 대응되는 파트너의 예약 업데이트를 조회합니다."
  partnerSchedule("파트너 아이디" targetId: ID!): PlatformPartnerScheduleOutput! @unstable
  "파트너 다건 조회 시 필요한 필터 옵션을 조회합니다."
  partnerFilterOptions(includeHidden: Boolean): PlatformPartnerFilterOptionsOutput! @unstable
  partnerId(plainId: String!): PlatformPartnerIdOutput! @hidden @unstable
  partnerIdSuggestion: PlatformPartnerIdSuggestionOutput! @hidden @unstable
  partnerSummaries(keyword: String!, limit: Int!): PlatformPartnerSummariesOutput! @hidden @unstable
  "주어진 아이디에 대응되는 계약을 조회합니다."
  contract(id: ID!): PlatformContractOutput!
  "여러 계약을 조회합니다."
  contracts("요청할 페이지 정보" page: PageInput, "조회할 계약 조건 필터" filter: PlatformContractFilterInput): PlatformContractsOutput! @unstable
  "주어진 아이디에 대응되는 계약의 예약 업데이트를 조회합니다."
  contractSchedule(targetId: ID!): PlatformContractScheduleOutput! @unstable
  "계약 다건 조회 시 필요한 필터 옵션을 조회합니다."
  contractFilterOptions(includeHidden: Boolean): PlatformContractFilterOptionsOutput! @unstable
  contractId(plainId: String!): PlatformContractIdOutput! @hidden @unstable
  contractIdSuggestion: PlatformContractIdSuggestionOutput! @hidden @unstable
  transfer(id: ID!): PlatformTransferOutput!
  transferDashboard(settlementDate: Date!, isForTest: Boolean): PlatformTransferDashboardOutput! @hidden @unstable
  transferSummaries(page: PageInput, filter: PlatformTransferFilterInput): PlatformTransferSummariesOutput! @hidden @unstable
  transferFilterOptions(includeHidden: Boolean): PlatformTransferFilterOptionsOutput! @hidden @unstable
  payableSettlementDates(isForTest: Boolean): PlatformPayableSettlementDatesOutput! @hidden @unstable
  partnerSettlements("요청할 페이지 정보" page: PageInput, "조회할 정산내역 조건 필터" filter: PlatformPartnerSettlementFilterInput!): PlatformPartnerSettlementsOutput! @hidden @unstable
  partnerSettlementFilterOptions(includeHidden: Boolean, isForTest: Boolean): PlatformPartnerSettlementFilterOptionsOutput! @hidden @unstable
  payout(id: ID!): PlatformPayoutOutput! @hidden @unstable
  payouts(page: PageInput, filter: PlatformPayoutFilterInput): PlatformPayoutsOutput! @hidden @unstable
}

"""
플랫폼 정산 계좌

`currency` 가 KRW 일 경우 예금주 조회 API 를 통해 올바른 계좌인지 검증합니다. 그 외의 화폐일 경우 따로 검증하지는 않습니다.
"""
type PlatformAccount {
  "은행"
  bank: Bank!
  "정산에 사용할 통화"
  currency: Currency!
  "계좌번호"
  number: String!
  "예금주명"
  holder: String!
  "계좌 상태"
  status: PlatformAccountStatus!
}

type PlatformAdditionalFeePoliciesNotFoundError implements Error {
  plainIds: [String!]!
  ids: [ID!]!
  message: String
}

"추가 수수료 정책 다건 조회 성공 응답 정보"
type PlatformAdditionalFeePoliciesPayload {
  "조회된 추가 수수료 정책 리스트"
  items: [PlatformAdditionalFeePolicy!]!
  "조회된 페이지 정보"
  page: PageInfo!
}

"""
추가 수수료 정책

추가 수수료 정책는 가맹점의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
"""
type PlatformAdditionalFeePolicy implements Node {
  plainId: String!
  id: ID!
  "책정 수수료"
  fee: PlatformFee!
  "해당 추가 수수료 정책에 대한 메모"
  memo: String
  "부가세를 부담할 주체"
  vatPayer: PlatformPayer!
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformAdditionalFeePolicyAlreadyExistsError implements Error {
  message: String
}

"추가 수수료 정책 필터 옵션 정보"
type PlatformAdditionalFeePolicyFilterOptions {
  "조회된 추가 수수료 정책 id 리스트"
  ids: [String!]!
}

type PlatformAdditionalFeePolicyId {
  additionalFeePolicyPlainId: String!
  additionalFeePolicyId: ID!
  exists: Boolean!
}

type PlatformAdditionalFeePolicyNotFoundError implements Error {
  message: String
}

"추가 수수료 정책의 예약된 업데이트 정보"
type PlatformAdditionalFeePolicySchedule {
  targetPlainId: String!
  "예약 업데이트의 대상 객체 아이디"
  targetId: ID!
  "책정 수수료"
  fee: PlatformFee!
  "해당 추가 수수료 정책에 대한 메모"
  memo: String
  "부가세를 부담할 주체"
  vatPayer: PlatformPayer!
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformAdditionalFeePolicyScheduleAlreadyExistsError implements Error {
  message: String
}

type PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError {
  additionalFeePolicyPlainId: String!
  additionalFeePolicyId: ID!
  feeCurrency: Currency!
  settlementCurrency: Currency!
  message: String
}

type PlatformCancellableAmountExceededError implements Error {
  cancellableAmount: Long!
  message: String
}

type PlatformCancellableDiscountAmountExceededError implements Error {
  discountSharePolicyPlainId: String!
  discountSharePolicyId: ID!
  cancellableAmount: Long!
  productPlainId: String
  message: String
}

type PlatformCancellableProductQuantityExceededError implements Error {
  productPlainId: String!
  cancellableQuantity: Long!
  message: String
}

type PlatformCancellationAndPaymentTypeMismatchedError implements Error {
  message: String
}

type PlatformCancellationNotFoundError implements Error {
  message: String
}

type PlatformCompletedPayout implements PlatformPayout & Node {
  plainId: String!
  id: ID!
  creator: PlatformPayoutCreator!
  settlementDate: Date!
  summary: PlatformPayoutSummary!
  filter: PlatformPartnerSettlementFilter!
  partnerSettlements(page: PageInput): PlatformPayoutPartnerSettlementsOutput! @hidden @unstable
  sheets: PlatformPayoutSheetsOutput! @hidden @unstable
  createdAt: DateTime!
  paidOutAt: DateTime!
}

"""
계약

계약은 플랫폼 가맹점이 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
가맹점의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
"""
type PlatformContract implements Node {
  "계약 고유 아이디"
  plainId: String!
  id: ID!
  "계약 내부 표기를 위한 메모"
  memo: String
  "중개수수료"
  platformFee: PlatformFee!
  "정산 주기"
  settlementCycle: PlatformSettlementCycle!
  "중개수수료에 대한 부가세 부담 주체"
  platformFeeVatPayer: PlatformPayer!
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformContractAlreadyExistsError implements Error {
  message: String
}

"계약 필터 옵션 조회 성공 응답 정보"
type PlatformContractFilterOptions {
  "조회된 중개 수수료 리스트"
  platformFees: [PlatformFee!]!
}

type PlatformContractId {
  contractPlainId: String!
  contractId: ID!
  exists: Boolean!
}

type PlatformContractIdSuggestion {
  contractPlainId: String!
  contractId: ID!
}

type PlatformContractNotFoundError implements Error {
  message: String
}

type PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError {
  contractPlainId: String!
  contractId: ID!
  feeCurrency: Currency!
  settlementCurrency: Currency!
  message: String
}

"계약의 예약된 업데이트 정보"
type PlatformContractSchedule {
  "계약 고유 아이디"
  targetPlainId: String!
  "예약 업데이트의 대상 객체 아이디"
  targetId: ID!
  "계약 내부 표기를 위한 메모"
  memo: String
  "중개수수료"
  platformFee: PlatformFee!
  "정산 주기"
  settlementCycle: PlatformSettlementCycle!
  "중개수수료에 대한 부가세 부담 주체"
  platformFeeVatPayer: PlatformPayer!
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformContractScheduleAlreadyExistsError implements Error {
  message: String
}

type PlatformContractsNotFoundError implements Error {
  plainIds: [String!]!
  ids: [ID!]!
  message: String
}

"계약 다건 조회 성공 응답"
type PlatformContractsPayload {
  "조회된 계약 리스트"
  items: [PlatformContract!]!
  "조회된 페이지 정보"
  page: PageInfo!
}

type PlatformDiscountCancelExceededOrderCancelAmountError implements Error {
  message: String
}

type PlatformDiscountExceededOrderAmountError implements Error {
  message: String
}

type PlatformDiscountSharePoliciesNotFoundError implements Error {
  plainIds: [String!]!
  ids: [ID!]!
  message: String
}

"할인 분담 정책 다건 조회 성공 응답 정보"
type PlatformDiscountSharePoliciesPayload {
  "조회된 할인 분담 정책 리스트"
  items: [PlatformDiscountSharePolicy!]!
  "조회된 페이지 정보"
  page: PageInfo!
}

"""
할인 분담 정책

할인 분담은 가맹점의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
"""
type PlatformDiscountSharePolicy implements Node {
  plainId: String!
  id: ID!
  """
할인 분담율

파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
"""
  partnerShareRate: Int!
  "해당 할인 분담에 대한 메모"
  memo: String
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformDiscountSharePolicyAlreadyExistsError implements Error {
  message: String
}

"할인 분담 정책 필터 옵션 조회 성공 응답 정보"
type PlatformDiscountSharePolicyFilterOptions {
  "조회된 파트너 분담율 리스트"
  partnerShareRates: [Int!]!
}

type PlatformDiscountSharePolicyId {
  discountSharePolicyPlainId: String!
  discountSharePolicyId: ID!
  exists: Boolean!
}

type PlatformDiscountSharePolicyIdDuplicatedError implements Error {
  discountSharePolicyPlainId: String!
  discountSharePolicyId: ID!
  message: String
}

type PlatformDiscountSharePolicyNotFoundError implements Error {
  message: String
}

"할인 분담 정책의 예약된 업데이트 정보"
type PlatformDiscountSharePolicySchedule {
  targetPlainId: String!
  "예약 업데이트의 대상 객체 아이디"
  targetId: ID!
  """
할인 분담율

파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
"""
  partnerShareRate: Int!
  "해당 할인 분담에 대한 메모"
  memo: String
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformDiscountSharePolicyScheduleAlreadyExistsError implements Error {
  message: String
}

type PlatformExternalPayment implements PlatformPayment {
  paymentPlainId: String!
  orderName: String
  currency: Currency!
  method: PlatformPaymentMethod
  paidAt: DateTime
}

"""
정액 수수료

총 금액에 무관하게 정해진 수수료 금액을 책정합니다.
"""
type PlatformFixedAmountFee {
  "고정된 수수료 금액"
  amount: Long!
}

"""
정률 수수료

총 금액에 정해진 비율을 곱한 만큼의 수수료를 책정합니다.
"""
type PlatformFixedRateFee {
  """
수수료율

총 금액 대비 수수료 비율을 의미하며, 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수입니다. `총 금액 * rate * 10^5` (`rate * 10^3 %`) 만큼 수수료를 책정합니다.
"""
  rate: Int!
}

type PlatformInvalidSettlementFormulaError implements Error {
  platformFee: PlatformSettlementFormulaError
  discountShare: PlatformSettlementFormulaError
  additionalFee: PlatformSettlementFormulaError
  message: String
}

type PlatformManualTransfer implements Node & PlatformTransfer {
  plainId: String!
  id: ID!
  partner: PlatformPartner!
  status: PlatformTransferStatus!
  memo: String
  settlementDate: Date!
  settlementCurrency: Currency!
  payoutPlainId: String
  payoutId: ID
  isForTest: Boolean!
  settlementAmount: Long!
}

type PlatformManualTransferSummary implements PlatformTransferSummary {
  transferPlainId: String!
  transferId: ID!
  partner: PlatformTransferSummaryPartner!
  status: PlatformTransferStatus!
  memo: String
  settlementDate: Date!
  settlementCurrency: Currency!
  isForTest: Boolean!
  settlementAmount: Long!
}

type PlatformNoPayablePartnerSettlementsError implements Error {
  message: String
}

"플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우"
type PlatformNotEnabledError implements Error {
  message: String
}

type PlatformOngoingPayout implements PlatformPayout & Node {
  plainId: String!
  id: ID!
  creator: PlatformPayoutCreator!
  settlementDate: Date!
  summary: PlatformPayoutSummary!
  filter: PlatformPartnerSettlementFilter!
  partnerSettlements(page: PageInput): PlatformPayoutPartnerSettlementsOutput! @hidden @unstable
  sheets: PlatformPayoutSheetsOutput! @hidden @unstable
  createdAt: DateTime!
}

type PlatformOngoingPayoutExistsError implements Error {
  message: String
}

type PlatformOrderCancelTransfer implements Node & PlatformTransfer {
  plainId: String!
  id: ID!
  partner: PlatformPartner!
  status: PlatformTransferStatus!
  memo: String
  settlementDate: Date!
  settlementCurrency: Currency!
  payoutPlainId: String
  payoutId: ID
  isForTest: Boolean!
  amount: PlatformOrderSettlementAmount!
  contract: PlatformContract!
  payment: PlatformPayment!
  settlementStartDate: Date!
  orderLines: [PlatformOrderTransferOrderLine!]!
  additionalFees: [PlatformOrderTransferAdditionalFee!]!
  discounts: [PlatformOrderTransferDiscount!]!
  cancellation: PlatformOrderTransferCancellation!
}

type PlatformOrderCancelTransferSummary implements PlatformTransferSummary {
  transferPlainId: String!
  transferId: ID!
  storePlainId: String!
  partner: PlatformTransferSummaryPartner!
  status: PlatformTransferStatus!
  memo: String
  settlementDate: Date!
  settlementCurrency: Currency!
  isForTest: Boolean!
  amount: PlatformOrderSettlementAmount!
  payment: PlatformTransferSummaryPayment!
  settlementStartDate: Date!
}

type PlatformOrderDetailMismatchedError implements Error {
  message: String
}

type PlatformOrderSettlementAmount {
  settlement: Long!
  payment: Long!
  order: Long!
  platformFee: Long!
  platformFeeVat: Long!
  additionalFee: Long!
  additionalFeeVat: Long!
  discount: Long!
  discountShare: Long!
}

type PlatformOrderTransfer implements Node & PlatformTransfer {
  plainId: String!
  id: ID!
  partner: PlatformPartner!
  status: PlatformTransferStatus!
  memo: String
  settlementDate: Date!
  settlementCurrency: Currency!
  payoutPlainId: String
  payoutId: ID
  isForTest: Boolean!
  amount: PlatformOrderSettlementAmount!
  contract: PlatformContract!
  payment: PlatformPayment!
  settlementStartDate: Date!
  orderLines: [PlatformOrderTransferOrderLine!]!
  additionalFees: [PlatformOrderTransferAdditionalFee!]!
  discounts: [PlatformOrderTransferDiscount!]!
}

type PlatformOrderTransferAdditionalFee {
  policy: PlatformAdditionalFeePolicy!
  amount: Long!
  vat: Long!
}

type PlatformOrderTransferAlreadyCancelledError implements Error {
  message: String
}

type PlatformOrderTransferCancellation {
  cancellationPlainId: String!
  cancelledAt: DateTime!
}

type PlatformOrderTransferDiscount {
  sharePolicy: PlatformDiscountSharePolicy!
  amount: Long!
  shareAmount: Long!
}

type PlatformOrderTransferOrderLine {
  product: PlatformOrderTransferProduct!
  quantity: Int!
  discounts: [PlatformOrderTransferDiscount!]!
  additionalFees: [PlatformOrderTransferAdditionalFee!]!
  amount: PlatformOrderSettlementAmount!
}

type PlatformOrderTransferProduct {
  productPlainId: String!
  name: String!
  amount: Long!
  tag: String
}

type PlatformOrderTransferSummary implements PlatformTransferSummary {
  transferPlainId: String!
  transferId: ID!
  storePlainId: String!
  partner: PlatformTransferSummaryPartner!
  status: PlatformTransferStatus!
  memo: String
  settlementDate: Date!
  settlementCurrency: Currency!
  isForTest: Boolean!
  amount: PlatformOrderSettlementAmount!
  payment: PlatformTransferSummaryPayment!
  settlementStartDate: Date!
}

"""
파트너

파트너는 가맹점이 정산해주어야 할 대상입니다.
기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
"""
type PlatformPartner implements Node {
  "파트너 고유 아이디"
  plainId: String!
  id: ID!
  "파트너 법인명 혹은 이름"
  name: String!
  "파트너 이메일"
  email: String!
  "파트너의 사업자등록번호. 개인 혹은 법인 사업자일 때만 명시합니다."
  businessRegistrationNumber: String
  "정산 계좌"
  account: PlatformAccount!
  "파트너의 상태"
  status: PlatformPartnerStatus!
  "파트너에 설정된 기본 계약"
  defaultContract: PlatformContractOutput!
  "파트너에 대한 메모"
  memo: String
  "파트너의 태그 리스트"
  tags: [String!]!
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

"파트너 현황 조회 성공 응답"
type PlatformPartnerDashboard {
  "전체 파트너 수"
  totalCount: Int!
  "정산 예정인 파트너 수"
  upcomingSettledCount: Int!
  """
예정된 정산일

정산이 예정되어 있지 않은 경우 값이 주어지지 않습니다.
"""
  upcomingSettlementDate: Date
}

"파트너 필터 옵션 조회 성공 응답 정보"
type PlatformPartnerFilterOptions {
  "조회된 태그 리스트"
  tags: [String!]!
}

type PlatformPartnerId {
  partnerPlainId: String!
  partnerId: ID!
  exists: Boolean!
}

type PlatformPartnerIdAlreadyExistsError implements Error {
  message: String
}

type PlatformPartnerIdSuggestion {
  partnerPlainId: String!
  partnerId: ID!
}

type PlatformPartnerIdsAlreadyExistError implements Error {
  plainIds: [String!]!
  ids: [ID!]!
  message: String
}

type PlatformPartnerIdsDuplicatedError implements Error {
  plainIds: [String!]!
  ids: [ID!]!
  message: String
}

type PlatformPartnerManualSettlement implements PlatformPartnerSettlement {
  partner: PlatformPartnerSettlementPartner!
  settlementDate: Date!
  settlementAmount: Long!
  settlementCurrency: Currency!
  payoutCurrency: Currency!
  isForTest: Boolean!
}

type PlatformPartnerNotFoundError implements Error {
  message: String
}

type PlatformPartnerOrderSettlement implements PlatformPartnerSettlement {
  partner: PlatformPartnerSettlementPartner!
  settlementDate: Date!
  settlementCurrency: Currency!
  payoutCurrency: Currency!
  contract: PlatformContractOutput!
  settlementStartDateRange: DateRange!
  amount: PlatformOrderSettlementAmount!
  isForTest: Boolean!
}

"파트너의 예약된 업데이트 정보"
type PlatformPartnerSchedule {
  "파트너 고유 아이디"
  targetPlainId: String!
  "예약 업데이트의 대상 객체 아이디"
  targetId: ID!
  "파트너 법인명 혹은 이름"
  name: String!
  "파트너 이메일"
  email: String!
  "파트너의 사업자등록번호. 개인 혹은 법인 사업자일 때만 명시합니다."
  businessRegistrationNumber: String
  "정산 계좌"
  account: PlatformAccount!
  "파트너의 상태"
  status: PlatformPartnerStatus!
  "파트너에 설정된 기본 계약"
  defaultContract: PlatformContractOutput!
  "파트너에 대한 메모"
  memo: String
  "파트너의 태그 리스트"
  tags: [String!]!
  "숨김 여부"
  isHidden: Boolean!
  "변경 적용 시점"
  appliedAt: DateTime!
}

type PlatformPartnerScheduleAlreadyExistsError implements Error {
  message: String
}

type PlatformPartnerSchedulesAlreadyExistError implements Error {
  plainIds: [String!]!
  ids: [ID!]!
  message: String
}

type PlatformPartnerSettlementFilter {
  settlementDate: Date!
  settlementStartDateRange: DateRange!
  contractPlainIds: [String!]!
  transferTypes: [PlatformTransferType!]!
  transferStatuses: [PlatformTransferStatus!]!
  banks: [Bank!]!
  paymentMethodTypes: [PaymentMethodType!]!
  settlementCurrencies: [Currency!]!
  payoutCurrencies: [Currency!]!
  partnerTags: [String!]!
  keyword: PlatformPartnerSettlementFilterKeyword
  isForTest: Boolean!
}

type PlatformPartnerSettlementFilterDateOption {
  settlementDate: Date!
  settlementStartDateRange: DateRange!
}

type PlatformPartnerSettlementFilterKeyword {
  type: PlatformPartnerSettlementFilterKeywordType!
  value: String!
}

type PlatformPartnerSettlementFilterOptions {
  contractPlainIds: [String!]!
  dateOptions: [PlatformPartnerSettlementFilterDateOption!]!
  banks: [Bank!]!
  settlementCurrencies: [Currency!]!
  payoutCurrencies: [Currency!]!
  partnerTags: [String!]!
}

type PlatformPartnerSettlementPartner {
  partnerPlainId: String!
  partnerId: ID!
  name: String!
  bank: Bank!
  accountHolder: String!
  accountNumber: String!
}

"정산내역 다건 조회 성공 응답 정보"
type PlatformPartnerSettlementsPayload {
  "조회된 정산내역 리스트"
  items: [PlatformPartnerSettlement!]!
  "조회된 페이지 정보"
  page: PageInfo!
}

type PlatformPartnerSummariesPayload {
  items: [PlatformPartnerSummary!]!
}

type PlatformPartnerSummary {
  partnerId: ID!
  partnerPlainId: String!
  name: String!
  email: String!
}

"파트너 다건 조회 성공 응답 정보"
type PlatformPartnersPayload {
  "조회된 파트너 리스트"
  items: [PlatformPartner!]!
  "조회된 페이지 정보"
  page: PageInfo!
}

"지급 가능한 정산일 리스트 조회 성공 응답 정보"
type PlatformPayableSettlementDatesPayload {
  "IN_PROCESS, SETTLED 상태의 Transfer가 등록되어 있는 정산일 리스트"
  settlementDates: [Date!]!
}

type PlatformPaymentChannel {
  channelPlainId: String!
  key: String!
  name: String!
  pgMerchantId: String!
  pgCompany: PgCompany
}

type PlatformPaymentMethodCard {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

type PlatformPaymentMethodEasyPay {
  provider: EasyPayProvider
  methodType: EasyPayMethodType
}

type PlatformPaymentMethodGiftCertificate {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

type PlatformPaymentMethodMobile {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

type PlatformPaymentMethodTransfer {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

type PlatformPaymentMethodVirtualAccount {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

type PlatformPaymentNotFoundError implements Error {
  message: String
}

type PlatformPayoutAlreadyCompletedError implements Error {
  message: String
}

type PlatformPayoutCreator {
  userId: ID!
  userPlainId: String!
  email: String
}

type PlatformPayoutCreatorMismatchedError implements Error {
  creatorPlainId: String!
  message: String
}

type PlatformPayoutNotFoundError implements Error {
  message: String
}

type PlatformPayoutPartnerSettlement {
  plainId: String!
  id: ID!
  payoutPlainId: String!
  payoutId: ID!
  status: PlatformPayoutPartnerSettlementStatus!
  partnerSettlement: PlatformPartnerSettlement!
}

type PlatformPayoutPartnerSettlementAlreadyPaidOutError implements Error {
  message: String
}

type PlatformPayoutPartnerSettlementNotFoundError implements Error {
  message: String
}

type PlatformPayoutSheetsPayload {
  items: [PayoutSheet!]!
}

type PlatformPayoutSummary {
  partnerCount: Int!
  totalSettlementAmount: Long!
  paidOutPartnerSettlementCount: Int!
  totalPartnerSettlementCount: Int!
}

type PlatformPayoutsPayload {
  items: [PlatformPayout!]!
  page: PageInfo!
}

type PlatformPortOnePayment implements PlatformPayment {
  paymentPlainId: String!
  storePlainId: String!
  channelKey: String!
  orderName: String!
  method: PlatformPaymentMethod
  currency: Currency!
  paidAt: DateTime!
}

type PlatformProductIdDuplicatedError implements Error {
  productPlainId: String!
  message: String
}

type PlatformProductIdNotFoundError implements Error {
  productPlainId: String!
  message: String
}

type PlatformSettlementCancelAmountExceededPortOneCancelError implements Error {
  registeredSettlementCancelAmount: Long!
  requestSettlementCancelAmount: Long!
  portOneCancelAmount: Long!
  message: String
}

"""
정산 주기

지체일, 정산일, 기준일로 구성되며, 해당 요소들의 조합으로 실제 정산일을 계산합니다.
"""
type PlatformSettlementCycle {
  """
지체일 (d+n 의 n)

정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.
"""
  lagDays: Int!
  "기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다."
  datePolicy: PlatformSettlementCycleDatePolicy!
  "정산 주기 계산 방식"
  method: PlatformSettlementCycleMethod!
}

"매일 정산"
type PlatformSettlementCycleMethodDaily {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"정해진 날짜(월, 일)에 정산"
type PlatformSettlementCycleMethodManualDates {
  dates: [MonthDay!]!
}

"매월 정해진 날(일)에 정산"
type PlatformSettlementCycleMethodMonthly {
  daysOfMonth: [Int!]!
}

"매주 정해진 요일에 정산"
type PlatformSettlementCycleMethodWeekly {
  daysOfWeek: [DayOfWeek!]!
}

"플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보"
type PlatformSettlementFormula {
  "플랫폼 수수료 계산식"
  platformFee: String!
  "할인 분담액 계산식"
  discountShare: String!
  "추가 수수료 계산식"
  additionalFee: String!
}

type PlatformSettlementFormulaInvalidFunction {
  name: String!
  position: PlatformSettlementFormulaPosition!
}

type PlatformSettlementFormulaInvalidOperator {
  operator: String!
  position: PlatformSettlementFormulaPosition!
}

type PlatformSettlementFormulaInvalidSyntax {
  syntax: String!
  position: PlatformSettlementFormulaPosition!
}

type PlatformSettlementFormulaInvalidVariable {
  name: String!
  position: PlatformSettlementFormulaPosition!
}

type PlatformSettlementFormulaPosition {
  startLine: Int!
  startIndex: Int!
  endLine: Int!
  endIndex: Int!
}

type PlatformSettlementFormulaUnexpectedFunctionArguments {
  functionName: String!
  expectedCount: Int!
  currentCount: Int!
  position: PlatformSettlementFormulaPosition!
}

type PlatformSettlementFormulaUnknownError {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

type PlatformSettlementFormulaUnsupportedVariable {
  name: String!
  position: PlatformSettlementFormulaPosition!
}

"플랫폼 계산식 검증 결과"
type PlatformSettlementFormulaValidation {
  """
계산식 오류 정보

계산식이 올바른 경우 주어지지 않습니다.
"""
  error: PlatformInvalidSettlementFormulaError
}

type PlatformSettlementPaymentAmountExceededPortOnePaymentError implements Error {
  registeredSettlementPaymentAmount: Long!
  requestSettlementPaymentAmount: Long!
  portOnePaymentAmount: Long!
  message: String
}

type PlatformTransferAlreadyExistsError implements Error {
  transferPlainId: String!
  transferId: ID!
  message: String
}

type PlatformTransferDashboard {
  totalSettlementAmount: Long!
  totalSettlementFeeAmount: Long!
  totalOrderAmount: Long!
  settlementStartDateRange: DateRange
}

type PlatformTransferDiscountSharePolicyNotFoundError implements Error {
  discountSharePolicyPlainId: String!
  discountSharePolicyId: ID!
  productPlainId: String
  message: String
}

type PlatformTransferFilterOptions {
  partnerTags: [String!]!
  contractPlainIds: [String!]!
  additionalFeePolicyPlainIds: [String!]!
  discountSharePolicyPlainIds: [String!]!
  paymentChannels: [PlatformPaymentChannel!]!
}

type PlatformTransferNotFoundError implements Error {
  message: String
}

type PlatformTransferSummariesPayload {
  transferSummaries: [PlatformTransferSummary!]!
  page: PageInfo!
}

type PlatformTransferSummaryExternalPayment implements PlatformTransferSummaryPayment {
  paymentPlainId: String!
  orderName: String
  currency: Currency!
  methodType: PaymentMethodType
}

type PlatformTransferSummaryPartner {
  partnerPlainId: String!
  partnerId: ID!
  name: String!
}

type PlatformTransferSummaryPortOnePayment implements PlatformTransferSummaryPayment {
  paymentPlainId: String!
  orderName: String!
  currency: Currency!
  methodType: PaymentMethodType
}

"""
사용할 수 없는 정산일이 요청된 경우

요청한 정산일에 이체되지 않은 주문 정산 건이 없을 때 발생합니다.
"""
type PlatformUnavailableSettlementDateError implements Error {
  settlementDate: Date!
  message: String
}

type Query {
  "요청된 ID 에 대응되는 객체를 반환합니다 (Global Object Identification)."
  node(id: ID!): Node
  """
가맹점 정보를 조회합니다.
요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
"""
  merchant: MerchantOutput!
}

"토큰 재발급 성공 응답"
type RefreshTokenPayload {
  """
인증에 사용하는 엑세스 토큰

하루의 유효기간을 가지고 있습니다.
"""
  accessToken: String!
  """
토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰

일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
"""
  refreshToken: String!
}

"파트너 거절 성공 응답"
type RejectPlatformPartnerPayload {
  "거절된 파트너"
  partner: PlatformPartner!
}

"추가 수수료 정책 예약 업데이트 재설정 성공 응답"
type ReschedulePlatformAdditionalFeePayload {
  "예약된 추가 수수료 정책"
  scheduledAdditionalFeePolicy: PlatformAdditionalFeePolicySchedule!
}

"계약 예약 업데이트 재설정 성공 응답"
type ReschedulePlatformContractPayload {
  "예약된 계약 정보"
  scheduledContract: PlatformContractSchedule!
}

"할인 분담 정책 예약 업데이트 재설정 성공 응답"
type ReschedulePlatformDiscountSharePayload {
  "예약된 할인 분담 정보"
  scheduledDiscountSharePolicy: PlatformDiscountSharePolicySchedule!
}

"파트너 예약 업데이트 재설정 성공 응답"
type ReschedulePlatformPartnerPayload {
  "예약된 파트너 정보"
  scheduledPartner: PlatformPartnerSchedule!
}

"추가 수수료 정책 업데이트 예약 성공 응답"
type SchedulePlatformAdditionalFeePayload {
  "예약된 추가 수수료 정책"
  scheduledAdditionalFeePolicy: PlatformAdditionalFeePolicySchedule!
}

"계약 업데이트 예약 성공 응답"
type SchedulePlatformContractPayload {
  "예약된 계약 정보"
  scheduledContract: PlatformContractSchedule!
}

"할인 분담 정책 업데이트 예약 성공 응답"
type SchedulePlatformDiscountSharePayload {
  "예약된 할인 분담 정보"
  scheduledDiscountSharePolicy: PlatformDiscountSharePolicySchedule!
}

"파트너 업데이트 예약 성공 응답"
type SchedulePlatformPartnerPayload {
  "예약된 파트너 정보"
  scheduledPartner: PlatformPartnerSchedule!
}

type SchedulePlatformPartnersPayload {
  "Fake field because GraphQL does not support empty objects. Do not query, use __typename instead."
  _: Boolean
}

"인증 정보가 올바르지 않은 경우"
type UnauthorizedError implements Error {
  message: String
}

type UpdatePayoutAllPartnerSettlementsPayload {
  payout: PlatformPayout!
}

"추가 수수료 정책 업데이트 성공 응답"
type UpdatePlatformAdditionalFeePayload {
  "업데이트된 추가 수수료 정책"
  additionalFeePolicy: PlatformAdditionalFeePolicy!
}

"계약 객체 업데이트 성공 응답"
type UpdatePlatformContractPayload {
  "업데이트된 계약 객체"
  contract: PlatformContract!
}

"할인 분담 정책 업데이트 성공 응답"
type UpdatePlatformDiscountSharePayload {
  "업데이트된 할인 분담 정책"
  discountSharePolicy: PlatformDiscountSharePolicy!
}

"파트너 업데이트 성공 응답"
type UpdatePlatformPartnerPayload {
  "업데이트된 파트너"
  partner: PlatformPartner!
}

"플랫폼 업데이트 결과 정보"
type UpdatePlatformPayload {
  "업데이트된 플랫폼 정보"
  platform: Platform!
}

type UpdatePlatformPayoutPartnerSettlementPayload {
  payoutPartnerSettlement: PlatformPayoutPartnerSettlement!
  payout: PlatformPayout!
}
